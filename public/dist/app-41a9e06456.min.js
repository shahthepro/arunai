!function(window){"use strict";function registerModule(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)}var applicationModuleName="mean",service={applicationEnvironment:window.env,applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ngFileUpload","ui-notification"],registerModule:registerModule};window.ApplicationConfiguration=service,angular.module("ui-notification").config(["NotificationProvider",function(NotificationProvider){NotificationProvider.setOptions({delay:2e3,startTop:20,startRight:10,verticalSpacing:20,horizontalSpacing:20,positionX:"right",positionY:"bottom"})}])}(window);
!function(app){"use strict";function bootstrapConfig($compileProvider,$locationProvider,$httpProvider,$logProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!1}).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor"),$compileProvider.debugInfoEnabled("production"!==app.applicationEnvironment),$logProvider.debugEnabled("production"!==app.applicationEnvironment)}function init(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[app.applicationModuleName])}angular.module(app.applicationModuleName,app.applicationModuleVendorDependencies),angular.module(app.applicationModuleName).config(bootstrapConfig),bootstrapConfig.$inject=["$compileProvider","$locationProvider","$httpProvider","$logProvider"],angular.element(document).ready(init)}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("attendances"),app.registerModule("attendances.admin.routes")}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("core",["ui.toggle"]),app.registerModule("core.routes",["ui.router"]),app.registerModule("core.admin",["core","ui.toggle"]),app.registerModule("core.admin.routes",["ui.router"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("courses"),app.registerModule("courses.admin.routes")}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("departments"),app.registerModule("departments.admin.routes")}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("pages",["ui.tinymce"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("users"),app.registerModule("users.admin"),app.registerModule("users.admin.routes",["ui.router","core.routes","users.admin.services"]),app.registerModule("users.admin.services"),app.registerModule("users.routes",["ui.router","core.routes"]),app.registerModule("users.services")}(ApplicationConfiguration);
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.attendances",{abstract:!0,url:"/attendances",template:"<ui-view/>"}).state("admin.attendances.list",{url:"",templateUrl:"/modules/attendances/client/views/list-attendances.client.view.html",controller:"AttendancesListController",controllerAs:"vm",data:{roles:["professor","admin"],pageTitle:"Attendances List"}}).state("admin.attendances.mark",{url:"/:assignmentId/mark",templateUrl:"/modules/attendances/client/views/mark-attendance.client.view.html",controller:"MarkAttendanceController",controllerAs:"vm",resolve:{assignmentResolve:getAssignment},data:{roles:["professor","admin"],pageTitle:"Mark Attendance"}})}function getAssignment($stateParams,AssignmentsService){return AssignmentsService.get({assignmentId:$stateParams.assignmentId}).$promise}function getCourse($stateParams,CoursesService){return CoursesService.get({courseId:$stateParams.courseId}).$promise}angular.module("attendances.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getAssignment.$inject=["$stateParams","AssignmentsService"],getCourse.$inject=["$stateParams","CoursesService"]}();
!function(){"use strict";function AttendancesController($scope,$state,$window,Authentication,attendance){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.attendance.$remove($state.go("admin.attendances.list"))}function save(isValid){function successCallback(res){$state.go("admin.attendances.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.attendance._id?vm.attendance.$update(successCallback,errorCallback):vm.attendance.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.attendanceForm"),!1)}var vm=this;vm.authentication=Authentication,vm.attendance=attendance,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("attendances").controller("AttendancesController",AttendancesController),AttendancesController.$inject=["$scope","$state","$window","Authentication","attendanceResolve"]}();
!function(){"use strict";function AttendancesListController(AttendancesService,Authentication,ProfessorsService){var vm=this;vm.authentication=Authentication,vm.assignments=ProfessorsService.assignedCourses({userId:vm.authentication.user._id}),vm.attendances=AttendancesService.query()}angular.module("attendances").controller("AttendancesListController",AttendancesListController),AttendancesListController.$inject=["AttendancesService","Authentication","ProfessorsService"]}();
!function(){"use strict";function MarkAttendanceController(AttendancesService,ProfessorsService,StudentsService,AssignmentsService,Authentication,$http,$state,assignment,Notification){var vm=this;vm.authentication=Authentication,vm.professor=vm.authentication.user,vm.assignment=assignment,vm.course=vm.assignment.course,vm.date=new Date,vm.attendances=[],vm.fetchAttendances=function(){vm.attendances=[],AttendancesService.getAttendances({batch:vm.assignment.batch,courseId:vm.course._id,date:Math.floor(vm.date.getTime()/1e3)}).$promise.then(function(attendances){attendances.length>0?vm.attendances=attendances:StudentsService.filterStudents({departmentId:vm.course.department,batch:vm.assignment.batch,semester:vm.course.semester}).$promise.then(function(students){students.forEach(function(student){var newAttendance=new AttendancesService;newAttendance.student=student,newAttendance.course=vm.course,newAttendance.date=vm.date,newAttendance.status=!0,vm.attendances.push(newAttendance)}),Notification.info({message:"Attendance not yet marked for the day",delay:3e3})},function(error){Notification.error({title:"Something went wrong",message:"Failed to fetch records",delay:3e3})})},function(error){Notification.error({title:"Something went wrong",message:"Failed to fetch records",delay:3e3})})},vm.fetchAttendances(),vm.saveAttendance=function(){function successCallback(res){console.log(vm.attendances)}function errorCallback(res){vm.error=res.data.message,console.log(res)}vm.attendances.forEach(function(attendance){attendance._id?attendance.$update(successCallback,errorCallback):attendance.$save(successCallback,errorCallback)})}}angular.module("attendances").controller("MarkAttendanceController",MarkAttendanceController),MarkAttendanceController.$inject=["AttendancesService","ProfessorsService","StudentsService","AssignmentsService","Authentication","$http","$state","assignmentResolve","Notification"]}();
!function(){"use strict";function AttendancesService($resource){return $resource("/api/attendances/:attendanceId",{attendanceId:"@_id"},{update:{method:"PUT"},getAttendances:{method:"GET",url:"/api/attendances/:courseId/:batch/:date",isArray:!0}})}angular.module("attendances").factory("AttendancesService",AttendancesService),AttendancesService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}angular.module("core.admin").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin",{abstract:!0,url:"/admin",template:"<ui-view/>",data:{roles:["student","professor","hod","admin"]}}).state("admin.dashboard",{url:"",templateUrl:"/modules/core/client/views/admin/home.client.view.html",controller:"AdminDashboardController",controllerAs:"vm",data:{roles:["student","professor","hod","admin"]}})}angular.module("core.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenu("account",{roles:["user"]}),menuService.addMenuItem("account",{title:"",state:"settings",type:"dropdown",roles:["user"]}),menuService.addSubMenuItem("account","settings",{title:"My Dashboard",state:"admin.dashboard"})}angular.module("core").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeFilter($rootScope,$state,Authentication,$window){function stateChangeStart(event,toState,toParams,fromState,fromParams){if(""!==fromState.name&&toState.name.startsWith("admin")!==fromState.name.startsWith("admin")&&(event.preventDefault(),$window.location.href=$state.href(toState.name,toParams,{absolute:!0})),toState.data&&toState.data.roles&&toState.data.roles.length>0){for(var allowed=!1,i=0,roles=toState.data.roles;i<roles.length;i++)if("guest"===roles[i]||Authentication.user&&void 0!==Authentication.user.roles&&Authentication.user.roles.indexOf(roles[i])!==-1){allowed=!0;break}allowed||(event.preventDefault(),null!==Authentication.user&&"object"==typeof Authentication.user?$state.transitionTo("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}function stateChangeSuccess(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)}function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",stateChangeStart),$rootScope.$on("$stateChangeSuccess",stateChangeSuccess)}angular.module("core").run(routeFilter),routeFilter.$inject=["$rootScope","$state","Authentication","$window"]}();
!function(){"use strict";function routeConfig($stateProvider,$urlRouterProvider){$urlRouterProvider.rule(function($injector,$location){var path=$location.path(),hasTrailingSlash=path.length>1&&"/"===path[path.length-1];if(hasTrailingSlash){var newPath=path.substr(0,path.length-1);$location.replace().path(newPath)}}),$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"/modules/core/client/views/home.client.view.html",controller:"HomeController",controllerAs:"vm"}).state("not-found",{url:"/not-found",templateUrl:"/modules/core/client/views/404.client.view.html",controller:"ErrorController",controllerAs:"vm",params:{message:["$stateParams",function($stateParams){return $stateParams.message}]},data:{ignoreState:!0,pageTitle:"Not Found"}}).state("bad-request",{url:"/bad-request",templateUrl:"/modules/core/client/views/400.client.view.html",controller:"ErrorController",controllerAs:"vm",params:{message:["$stateParams",function($stateParams){return $stateParams.message}]},data:{ignoreState:!0,pageTitle:"Bad Request"}}).state("forbidden",{url:"/forbidden",templateUrl:"/modules/core/client/views/403.client.view.html",data:{ignoreState:!0,pageTitle:"Forbidden"}})}angular.module("core.routes").config(routeConfig),routeConfig.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function ErrorController($stateParams){var vm=this;vm.errorMessage=null,$stateParams.message&&(vm.errorMessage=$stateParams.message)}angular.module("core").controller("ErrorController",ErrorController),ErrorController.$inject=["$stateParams"]}();
!function(){"use strict";function HeaderController($scope,$state,Authentication,menuService){function stateChangeSuccess(){vm.isCollapsed=!1}var vm=this;vm.accountMenu=menuService.getMenu("account").items[0],vm.authentication=Authentication,vm.isCollapsed=!1,vm.menu=menuService.getMenu("topbar"),$scope.$on("$stateChangeSuccess",stateChangeSuccess)}angular.module("core").controller("HeaderController",HeaderController),HeaderController.$inject=["$scope","$state","Authentication","menuService"]}();
!function(){"use strict";function HomeController(){}angular.module("core").controller("HomeController",HomeController)}();
!function(){"use strict";function autofocus($timeout,$window){function link(scope,element,attrs){$window.innerWidth>=800&&$timeout(function(){var el=element[0];el.focus(),el.selectionStart=el.selectionEnd=el.value.length},100)}var directive={restrict:"A",link:link};return directive}angular.module("core").directive("autofocus",autofocus),autofocus.$inject=["$timeout","$window"]}();
!function(){"use strict";function fileListBind(){return{scope:{fileListBind:"=",onChangeCallback:"&"},link:function(scope,element,attributes){element.bind("change",function(event){scope.$apply(function(){scope.fileListBind=event.target.files,scope.onChangeCallback({files:event.target.files})})})}}}angular.module("core").directive("fileListBind",fileListBind)}();
!function(){"use strict";function pageTitle($rootScope,$interpolate,$state){function link(scope,element){function listener(event,toState){var applicationCoreTitle="Arunai Portal",separeteBy=" - ";if(toState.data&&toState.data.pageTitle){var stateTitle=$interpolate(toState.data.pageTitle)($state.$current.locals.globals);element.html(applicationCoreTitle+separeteBy+stateTitle)}else element.html(applicationCoreTitle)}$rootScope.$on("$stateChangeSuccess",listener)}var directive={restrict:"A",link:link};return directive}angular.module("core").directive("pageTitle",pageTitle),pageTitle.$inject=["$rootScope","$interpolate","$state"]}();
!function(){"use strict";function showErrors($timeout,$interpolate){function compile(elem,attrs){function linkFn(scope,el,attrs,formCtrl){function checkValidity(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}function reset(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)}function toggleClasses(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}var inputEl,inputName,inputNgEl,options,showSuccess,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw new Error("show-errors element has no child input elements with a 'name' attribute class");scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},toggleClasses),scope.$on("show-errors-check-validity",checkValidity),scope.$on("show-errors-reset",reset)}if(attrs.showErrors.indexOf("skipFormGroupCheck")===-1&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw new Error("show-errors element does not have the 'form-group' or 'input-group' class");return linkFn}var directive={restrict:"A",require:"^form",compile:compile};return directive}angular.module("core").directive("showErrors",showErrors),showErrors.$inject=["$timeout","$interpolate"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.assignments",{abstract:!0,url:"/assignments",template:"<ui-view/>"}).state("admin.assignments.list",{url:"",templateUrl:"/modules/courses/client/views/list-assignments.client.view.html",controller:"AssignmentsListController",controllerAs:"vm",data:{roles:["admin","hod"],pageTitle:"Course Assignments List"}}).state("admin.assignments.create",{url:"/create",templateUrl:"/modules/courses/client/views/form-assignment.client.view.html",controller:"AssignmentsController",controllerAs:"vm",resolve:{assignmentResolve:newAssignment},data:{roles:["admin","hod"],pageTitle:"Create Course Assignmentss"}}).state("admin.assignments.edit",{url:"/:assignmentId/edit",templateUrl:"/modules/courses/client/views/form-assignment.client.view.html",controller:"AssignmentsController",controllerAs:"vm",resolve:{assignmentResolve:getAssignment},data:{roles:["admin","hod"],pageTitle:"Edit Assignment"}})}function getAssignment($stateParams,AssignmentsService){return AssignmentsService.get({assignmentId:$stateParams.assignmentId}).$promise}function newAssignment(AssignmentsService){return new AssignmentsService}angular.module("courses.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getAssignment.$inject=["$stateParams","AssignmentsService"],newAssignment.$inject=["AssignmentsService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.courses",{abstract:!0,url:"/courses",template:"<ui-view/>"}).state("admin.courses.list",{url:"",templateUrl:"/modules/courses/client/views/list-courses.client.view.html",controller:"CoursesListController",controllerAs:"vm",data:{roles:["admin","hod"],pageTitle:"Courses List"}}).state("admin.courses.create",{url:"/create",templateUrl:"/modules/courses/client/views/form-course.client.view.html",controller:"CoursesController",controllerAs:"vm",resolve:{courseResolve:newCourse},data:{roles:["admin","hod"],pageTitle:"Courses Create"}}).state("admin.courses.edit",{url:"/:courseId/edit",templateUrl:"/modules/courses/client/views/form-course.client.view.html",controller:"CoursesController",controllerAs:"vm",resolve:{courseResolve:getCourse},data:{roles:["admin","hod"],pageTitle:"Edit Course {{ courseResolve.name }}"}})}function getCourse($stateParams,CoursesService){return CoursesService.get({courseId:$stateParams.courseId}).$promise}function newCourse(CoursesService){return new CoursesService}angular.module("courses.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getCourse.$inject=["$stateParams","CoursesService"],newCourse.$inject=["CoursesService"]}();
!function(){"use strict";function AssignmentsController($scope,$state,$window,Authentication,ProfessorsService,CoursesService,AssignmentsService,assignment){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.assignment.$remove($state.go("admin.assignments.list"))}function save(isValid){function successCallback(res){$state.go("admin.assignments.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.assignment._id?vm.assignment.$update(successCallback,errorCallback):vm.assignment.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.assignmentForm"),!1)}var vm=this;vm.authentication=Authentication,vm.courses=CoursesService.query(),vm.professors=ProfessorsService.query(),vm.assignment=assignment,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("courses").controller("AssignmentsController",AssignmentsController),AssignmentsController.$inject=["$scope","$state","$window","Authentication","ProfessorsService","CoursesService","AssignmentsService","assignmentResolve"]}();
!function(){"use strict";function CoursesController($scope,$state,$window,Authentication,course,DepartmentsService){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.course.$remove($state.go("admin.courses.list"))}function save(isValid){function successCallback(res){$state.go("admin.courses.list")}function errorCallback(res){vm.error=res.data.message}return isValid?(vm.authentication.user.roles.indexOf("admin")<0&&void 0!==vm.authentication.user.department&&(vm.course.department=vm.authentication.user.department),void(vm.course._id?vm.course.$update(successCallback,errorCallback):vm.course.$save(successCallback,errorCallback))):($scope.$broadcast("show-errors-check-validity","vm.form.courseForm"),!1)}var vm=this;vm.authentication=Authentication,vm.departments=DepartmentsService.query(),vm.course=course,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,void 0!==vm.authentication.user.department&&(vm.course.department=vm.authentication.user.department)}angular.module("courses").controller("CoursesController",CoursesController),CoursesController.$inject=["$scope","$state","$window","Authentication","courseResolve","DepartmentsService"]}();
!function(){"use strict";function AssignmentsListController(AssignmentsService){var vm=this;vm.assignments=AssignmentsService.query()}angular.module("courses").controller("AssignmentsListController",AssignmentsListController),AssignmentsListController.$inject=["AssignmentsService"]}();
!function(){"use strict";function CoursesListController(CoursesService){var vm=this;vm.courses=CoursesService.query()}angular.module("courses").controller("CoursesListController",CoursesListController),CoursesListController.$inject=["CoursesService"]}();
!function(){"use strict";function menuService(){function addMenu(menuId,options){return options=options||{},service.menus[menuId]={roles:options.roles||service.defaultRoles,items:options.items||[],shouldRender:shouldRender},service.menus[menuId]}function addMenuItem(menuId,options){if(options=options||{},service.validateMenuExistence(menuId),service.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item",class:options.class,roles:null===options.roles||"undefined"==typeof options.roles?service.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)options.items.hasOwnProperty(i)&&service.addSubMenuItem(menuId,options.state,options.items[i]);return service.menus[menuId]}function addSubMenuItem(menuId,parentItemState,options){options=options||{},service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)service.menus[menuId].items[itemIndex].state===parentItemState&&service.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",params:options.params||{},roles:null===options.roles||"undefined"==typeof options.roles?service.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return service.menus[menuId]}function getMenu(menuId){return service.validateMenuExistence(menuId),service.menus[menuId]}function init(){shouldRender=function(user){if(this.roles.indexOf("*")!==-1)return!0;if(!user)return!1;for(var userRoleIndex in user.roles)if(user.roles.hasOwnProperty(userRoleIndex))for(var roleIndex in this.roles)if(this.roles.hasOwnProperty(roleIndex)&&this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1},addMenu("topbar",{roles:["*"]})}function removeMenu(menuId){service.validateMenuExistence(menuId),delete service.menus[menuId]}function removeMenuItem(menuId,menuItemState){service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)service.menus[menuId].items.hasOwnProperty(itemIndex)&&service.menus[menuId].items[itemIndex].state===menuItemState&&service.menus[menuId].items.splice(itemIndex,1);return service.menus[menuId]}function removeSubMenuItem(menuId,submenuItemState){service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)if(this.menus[menuId].items.hasOwnProperty(itemIndex))for(var subitemIndex in service.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items.hasOwnProperty(subitemIndex)&&service.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&service.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return service.menus[menuId]}function validateMenuExistence(menuId){if(menuId&&menuId.length){if(service.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")}var shouldRender,service={addMenu:addMenu,addMenuItem:addMenuItem,addSubMenuItem:addSubMenuItem,defaultRoles:["user","admin"],getMenu:getMenu,menus:{},removeMenu:removeMenu,removeMenuItem:removeMenuItem,removeSubMenuItem:removeSubMenuItem,validateMenuExistence:validateMenuExistence};return init(),service}angular.module("core").factory("menuService",menuService)}();
!function(){"use strict";function PapaParseService($window){if("undefined"==typeof $window.Papa)throw new Error("PapaParse files are not included");return $window.Papa}angular.module("core").factory("PapaParse",PapaParseService),PapaParseService.$inject=["$window"]}();
!function(){"use strict";function Socket(Authentication,$state,$timeout){function connect(){Authentication.user&&(service.socket=io())}function emit(eventName,data){service.socket&&service.socket.emit(eventName,data)}function on(eventName,callback){service.socket&&service.socket.on(eventName,function(data){$timeout(function(){callback(data)})})}function removeListener(eventName){service.socket&&service.socket.removeListener(eventName)}var service={connect:connect,emit:emit,on:on,removeListener:removeListener,socket:null};return connect(),service}angular.module("core").factory("Socket",Socket),Socket.$inject=["Authentication","$state","$timeout"]}();
!function(){"use strict";function AssignmentsService($resource){return $resource("/api/assignments/:assignmentId",{assignmentId:"@_id"},{update:{method:"PUT"}})}angular.module("courses").factory("AssignmentsService",AssignmentsService),AssignmentsService.$inject=["$resource"]}();
!function(){"use strict";function CoursesService($resource){return $resource("/api/courses/:courseId",{courseId:"@_id"},{update:{method:"PUT"}})}angular.module("courses").factory("CoursesService",CoursesService),CoursesService.$inject=["$resource"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.departments",{abstract:!0,url:"/departments",template:"<ui-view/>"}).state("admin.departments.list",{url:"",templateUrl:"/modules/departments/client/views/list-departments.client.view.html",controller:"DepartmentsListController",controllerAs:"vm",data:{roles:["admin"],pageTitle:"Departments List"}}).state("admin.departments.create",{url:"/create",templateUrl:"/modules/departments/client/views/form-department.client.view.html",controller:"DepartmentsController",controllerAs:"vm",resolve:{departmentResolve:newDepartment},data:{roles:["admin"],pageTitle:"Departments Create"}}).state("admin.departments.edit",{url:"/:departmentId/edit",templateUrl:"/modules/departments/client/views/form-department.client.view.html",controller:"DepartmentsController",controllerAs:"vm",resolve:{departmentResolve:getDepartment},data:{roles:["admin"],pageTitle:"Edit Department {{ departmentResolve.name }}"}})}function getDepartment($stateParams,DepartmentsService){return DepartmentsService.get({departmentId:$stateParams.departmentId}).$promise}function newDepartment(DepartmentsService){return new DepartmentsService}angular.module("departments.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getDepartment.$inject=["$stateParams","DepartmentsService"],newDepartment.$inject=["DepartmentsService"]}();
!function(){"use strict";function DepartmentsController($scope,$state,$window,Authentication,department){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.department.$remove($state.go("admin.departments.list"))}function save(isValid){function successCallback(res){$state.go("admin.departments.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.department._id?vm.department.$update(successCallback,errorCallback):vm.department.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.departmentForm"),!1)}var vm=this;vm.authentication=Authentication,vm.department=department,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("departments").controller("DepartmentsController",DepartmentsController),DepartmentsController.$inject=["$scope","$state","$window","Authentication","departmentResolve"]}();
!function(){"use strict";function DepartmentsListController(DepartmentsService){var vm=this;vm.departments=DepartmentsService.query()}angular.module("departments").controller("DepartmentsListController",DepartmentsListController),DepartmentsListController.$inject=["DepartmentsService"]}();
!function(){"use strict";function DepartmentsService($resource){return $resource("/api/departments/:departmentId",{departmentId:"@_id"},{update:{method:"PUT"}})}angular.module("departments").factory("DepartmentsService",DepartmentsService),DepartmentsService.$inject=["$resource"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("pages",{abstract:!0,url:"/pages",template:"<ui-view/>"}).state("admin.pages",{abstract:!0,url:"/pages",template:"<ui-view/>"}).state("admin.pages.list",{url:"",templateUrl:"/modules/pages/client/views/list-pages.client.view.html",controller:"PagesListController",controllerAs:"vm",data:{pageTitle:"Pages List"}}).state("admin.pages.create",{url:"/create",templateUrl:"/modules/pages/client/views/form-page.client.view.html",controller:"PagesController",controllerAs:"vm",resolve:{pageResolve:newPage},data:{roles:["user","admin"],pageTitle:"Pages Create"}}).state("admin.pages.edit",{url:"/:pageId/edit",templateUrl:"/modules/pages/client/views/form-page.client.view.html",controller:"PagesController",controllerAs:"vm",resolve:{pageResolve:getPage},data:{roles:["user","admin"],pageTitle:"Edit Page {{ pageResolve.title }}"}}).state("pages.view",{url:"/:pageId",templateUrl:"/modules/pages/client/views/view-page.client.view.html",controller:"PagesController",controllerAs:"vm",resolve:{pageResolve:getPage},data:{pageTitle:"{{ pageResolve.title }}"}})}function getPage($stateParams,PagesService){return PagesService.get({pageId:$stateParams.pageId}).$promise}function newPage(PagesService){return new PagesService}angular.module("pages").config(routeConfig),routeConfig.$inject=["$stateProvider"],getPage.$inject=["$stateParams","PagesService"],newPage.$inject=["PagesService"]}();
!function(){"use strict";function PagesListController(PagesService){var vm=this;vm.pages=PagesService.query()}angular.module("pages").controller("PagesListController",PagesListController),PagesListController.$inject=["PagesService"]}();
!function(){"use strict";function PagesController($scope,$state,$window,Authentication,page){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.page.$remove($state.go("pages.list"))}function save(isValid){function successCallback(res){$state.go("pages.view",{pageId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.page._id?vm.page.$update(successCallback,errorCallback):vm.page.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.pageForm"),!1)}var vm=this;vm.authentication=Authentication,vm.page=page,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.tinymceOptions={plugins:"link image code",toolbar:"undo redo | bold italic | alignleft aligncenter alignright | code"}}angular.module("pages").controller("PagesController",PagesController),PagesController.$inject=["$scope","$state","$window","Authentication","pageResolve"]}();
!function(){"use strict";angular.module("pages").directive("bindHtmlUnsafe",["$compile",function($compile){return function($scope,$element,$attrs){var compile=function(newHTML){newHTML=$compile(newHTML)($scope),$element.html("").append(newHTML)},htmlName=$attrs.bindHtmlUnsafe;$scope.$watch(htmlName,function(newHTML){newHTML&&compile(newHTML)})}}])}();
!function(){"use strict";function PagesService($resource){return $resource("/api/pages/:pageId",{pageId:"@_id"},{update:{method:"PUT"},query:{method:"GET",isArray:!0}})}angular.module("pages").factory("PagesService",PagesService),PagesService.$inject=["$resource"]}();
!function(){"use strict";function routeConfig($stateProvider){function newProfessor($stateParams,ProfessorsService){return new ProfessorsService}function getProfessor($stateParams,ProfessorsService){return ProfessorsService.get({userId:$stateParams.userId}).$promise}$stateProvider.state("admin.professors",{url:"/professors",template:"<ui-view />",abstract:!0}).state("admin.professors.list",{url:"",templateUrl:"/modules/users/client/views/professors/list.client.view.html",controller:"ListProfessorsController",controllerAs:"vm",data:{roles:["hod","admin"],pageTitle:"List Professors"}}).state("admin.professors.add",{url:"/add",templateUrl:"/modules/users/client/views/professors/add.client.view.html",controller:"AddProfessorsController",controllerAs:"vm",data:{roles:["hod","admin"],pageTitle:"Add Professors"}}).state("admin.professors.create",{url:"/create",templateUrl:"/modules/users/client/views/professors/edit.client.view.html",controller:"EditProfessorsController",controllerAs:"vm",resolve:{userResolve:newProfessor},data:{roles:["hod","admin"],pageTitle:"New Professor"}}).state("admin.professors.edit",{url:"/:userId/edit",templateUrl:"/modules/users/client/views/professors/edit.client.view.html",controller:"EditProfessorsController",controllerAs:"vm",resolve:{userResolve:getProfessor},data:{roles:["hod","admin"],pageTitle:"Edit Professor {{ userResolve.displayName }}"}}),newProfessor.$inject=["$stateParams","ProfessorsService"],getProfessor.$inject=["$stateParams","ProfessorsService"]}angular.module("users.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function routeConfig($stateProvider){function newStudent($stateParams,StudentsService){return new StudentsService}function getStudent($stateParams,StudentsService){return StudentsService.get({userId:$stateParams.userId}).$promise}$stateProvider.state("admin.students",{url:"/students",template:"<ui-view />",abstract:!0}).state("admin.students.list",{url:"",templateUrl:"/modules/users/client/views/students/list.client.view.html",controller:"ListStudentsController",controllerAs:"vm",data:{roles:["hod","admin"],pageTitle:"List Students"}}).state("admin.students.add",{url:"/add",templateUrl:"/modules/users/client/views/students/add.client.view.html",controller:"AddStudentsController",controllerAs:"vm",data:{roles:["hod","admin"],pageTitle:"Add Students"}}).state("admin.students.create",{url:"/create",templateUrl:"/modules/users/client/views/students/edit.client.view.html",controller:"EditStudentsController",controllerAs:"vm",resolve:{userResolve:newStudent},data:{roles:["hod","admin"],pageTitle:"New Student"}}).state("admin.students.edit",{url:"/:userId/edit",templateUrl:"/modules/users/client/views/students/edit.client.view.html",controller:"EditStudentsController",controllerAs:"vm",resolve:{userResolve:getStudent},data:{roles:["hod","admin"],pageTitle:"Edit Student {{ userResolve.displayName }}"}}),newStudent.$inject=["$stateParams","StudentsService"],getStudent.$inject=["$stateParams","StudentsService"]}angular.module("users.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}angular.module("users.admin").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){function getUser($stateParams,AdminService){return AdminService.get({userId:$stateParams.userId}).$promise}$stateProvider.state("admin.users",{url:"/users",templateUrl:"/modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController",controllerAs:"vm",data:{pageTitle:"Users List"}}).state("admin.user-add",{url:"/users/new",templateUrl:"/modules/users/client/views/admin/add-user.client.view.html",controller:"UserAddController",controllerAs:"vm",data:{pageTitle:"New User"}}).state("admin.user",{url:"/users/:userId",templateUrl:"/modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit {{ userResolve.displayName }}"}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"/modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit User {{ userResolve.displayName }}"}}),getUser.$inject=["$stateParams","AdminService"]}angular.module("users.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("settings",{abstract:!0,url:"/settings",templateUrl:"/modules/users/client/views/settings/settings.client.view.html",controller:"SettingsController",controllerAs:"vm",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"/modules/users/client/views/settings/edit-profile.client.view.html",controller:"EditProfileController",controllerAs:"vm",data:{pageTitle:"Settings"}}).state("settings.password",{url:"/password",templateUrl:"/modules/users/client/views/settings/change-password.client.view.html",controller:"ChangePasswordController",controllerAs:"vm",data:{pageTitle:"Settings password"}}).state("settings.accounts",{url:"/accounts",templateUrl:"/modules/users/client/views/settings/manage-social-accounts.client.view.html",controller:"SocialAccountsController",controllerAs:"vm",data:{pageTitle:"Settings accounts"}}).state("settings.picture",{url:"/picture",templateUrl:"/modules/users/client/views/settings/change-profile-picture.client.view.html",controller:"ChangeProfilePictureController",controllerAs:"vm",data:{pageTitle:"Settings picture"}}).state("authentication",{abstract:!0,url:"/authentication",templateUrl:"/modules/users/client/views/authentication/authentication.client.view.html",controller:"AuthenticationController",controllerAs:"vm"}).state("authentication.signin",{url:"/signin?err",templateUrl:"/modules/users/client/views/authentication/signin.client.view.html",controller:"AuthenticationController",controllerAs:"vm",data:{pageTitle:"Signin"}}).state("password",{abstract:!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"/modules/users/client/views/password/forgot-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password forgot"}}).state("password.reset",{abstract:!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"/modules/users/client/views/password/reset-password-invalid.client.view.html",data:{pageTitle:"Password reset invalid"}}).state("password.reset.success",{url:"/success",templateUrl:"/modules/users/client/views/password/reset-password-success.client.view.html",data:{pageTitle:"Password reset success"}}).state("password.reset.form",{url:"/:token",templateUrl:"/modules/users/client/views/password/reset-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password reset form"}})}angular.module("users.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function AuthenticationController($scope,$state,UsersService,$location,$window,Authentication,PasswordValidator,Notification){function signup(isValid){return isValid?void UsersService.userSignup(vm.credentials).then(onUserSignupSuccess).catch(onUserSignupError):($scope.$broadcast("show-errors-check-validity","vm.userForm"),!1)}function signin(isValid){return isValid?void UsersService.userSignin(vm.credentials).then(onUserSigninSuccess).catch(onUserSigninError):($scope.$broadcast("show-errors-check-validity","vm.userForm"),!1)}function callOauthProvider(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}function onUserSignupSuccess(response){vm.authentication.user=response,Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Signup successful!'}),$state.go($state.previous.state.name||"home",$state.previous.params)}function onUserSignupError(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Signup Error!',delay:6e3})}function onUserSigninSuccess(response){vm.authentication.user=response,Notification.info({message:"Welcome "+response.firstName}),$state.previous.state.name.startsWith("admin")?$state.go($state.previous.state.name||"admin.dashboard",$state.previous.params):$state.go("admin.dashboard")}function onUserSigninError(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Signin Error!',delay:6e3})}var vm=this;vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.signup=signup,vm.signin=signin,vm.callOauthProvider=callOauthProvider,vm.usernameRegex=/^(?=[\w.-]+$)(?!.*[._-]{2})(?!\.)(?!.*\.$).{3,34}$/,$location.search().err&&Notification.error({message:$location.search().err}),vm.authentication.user&&$location.path("/")}angular.module("users").controller("AuthenticationController",AuthenticationController),AuthenticationController.$inject=["$scope","$state","UsersService","$location","$window","Authentication","PasswordValidator","Notification"]}();
!function(){"use strict";function PasswordController($scope,$stateParams,UsersService,$location,Authentication,PasswordValidator,Notification){function askForPasswordReset(isValid){return isValid?void UsersService.requestPasswordReset(vm.credentials).then(onRequestPasswordResetSuccess).catch(onRequestPasswordResetError):($scope.$broadcast("show-errors-check-validity","vm.forgotPasswordForm"),!1)}function resetUserPassword(isValid){return isValid?void UsersService.resetPassword($stateParams.token,vm.passwordDetails).then(onResetPasswordSuccess).catch(onResetPasswordError):($scope.$broadcast("show-errors-check-validity","vm.resetPasswordForm"),!1)}function onRequestPasswordResetSuccess(response){vm.credentials=null,Notification.success({message:response.message,title:'<i class="glyphicon glyphicon-ok"></i> Password reset email sent successfully!'})}function onRequestPasswordResetError(response){vm.credentials=null,Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Failed to send password reset email!',delay:4e3})}function onResetPasswordSuccess(response){vm.passwordDetails=null,Authentication.user=response,Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Password reset successful!'}),$location.path("/password/reset/success")}function onResetPasswordError(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Password reset failed!',delay:4e3})}var vm=this;vm.resetUserPassword=resetUserPassword,vm.askForPasswordReset=askForPasswordReset,vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.authentication.user&&$location.path("/")}angular.module("users").controller("PasswordController",PasswordController),PasswordController.$inject=["$scope","$stateParams","UsersService","$location","Authentication","PasswordValidator","Notification"]}();
!function(){"use strict";function passwordValidator(PasswordValidator){function link(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.getPopoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.getPopoverMsg="",scope.passwordErrors=[],status=!0)}return status}}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("passwordValidator",passwordValidator),passwordValidator.$inject=["PasswordValidator"]}();
!function(){"use strict";function passwordVerify(){function link(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin===password})})}var directive={require:"ngModel",scope:{passwordVerify:"="},link:link};return directive}angular.module("users").directive("passwordVerify",passwordVerify)}();
!function(){"use strict";function lowercase(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("lowercase",lowercase)}();
!function(){"use strict";function Authentication($window){var auth={user:$window.user};return auth}angular.module("users.services").factory("Authentication",Authentication),Authentication.$inject=["$window"]}();
!function(){"use strict";function PasswordValidator($window){function getResult(password){var result=owaspPasswordStrengthTest.test(password);return result}function getPopoverMsg(){var popoverMsg="Please enter a passphrase or password with "+owaspPasswordStrengthTest.configs.minLength+" or more characters, numbers, lowercase, uppercase, and special characters.";return popoverMsg}var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest,service={getResult:getResult,getPopoverMsg:getPopoverMsg};return service}angular.module("users.services").factory("PasswordValidator",PasswordValidator),PasswordValidator.$inject=["$window"]}();
!function(){"use strict";function ProfessorsService($resource){return $resource("/api/professors/:userId",{userId:"@_id"},{update:{method:"PUT"},assignedCourses:{method:"GET",url:"/api/professors/:userId/assigned",isArray:!0}})}angular.module("users.services").factory("ProfessorsService",ProfessorsService),ProfessorsService.$inject=["$resource"]}();
!function(){"use strict";function StudentsService($resource){return $resource("/api/students/:userId",{userId:"@_id"},{update:{method:"PUT"},filterStudents:{method:"GET",url:"/api/students/:departmentId/:batch/:semester",isArray:!0}})}angular.module("users.services").factory("StudentsService",StudentsService),StudentsService.$inject=["$resource"]}();
!function(){"use strict";function UserMetaService(Authentication,$resource){return $resource("/api/users/:userId/meta/:metaKey",{userId:"@_id",metaKey:"@_id"},{update:{method:"PUT"}})}angular.module("users.services").factory("UserMetaService",UserMetaService),UserMetaService.$inject=["Authentication","$resource"]}();
!function(){"use strict";function UsersService($resource){var Users=$resource("/api/users",{},{update:{method:"PUT"},updatePassword:{method:"POST",url:"/api/users/password"},deleteProvider:{method:"DELETE",url:"/api/users/accounts",params:{provider:"@provider"}},sendPasswordResetToken:{method:"POST",url:"/api/auth/forgot"},resetPasswordWithToken:{method:"POST",url:"/api/auth/reset/:token"},signup:{method:"POST",url:"/api/auth/signup"},signin:{method:"POST",url:"/api/auth/signin"}});return angular.extend(Users,{changePassword:function(passwordDetails){return this.updatePassword(passwordDetails).$promise},removeSocialAccount:function(provider){return this.deleteProvider({provider:provider}).$promise},requestPasswordReset:function(credentials){return this.sendPasswordResetToken(credentials).$promise},resetPassword:function(token,passwordDetails){return this.resetPasswordWithToken({token:token},passwordDetails).$promise},userSignup:function(credentials){return this.signup(credentials).$promise},userSignin:function(credentials){return this.signin(credentials).$promise}}),Users}function AdminService($resource){return $resource("/api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}angular.module("users.services").factory("UsersService",UsersService),UsersService.$inject=["$resource"],angular.module("users.admin.services").factory("AdminService",AdminService),AdminService.$inject=["$resource"]}();
!function(){"use strict";function AdminDashboardController($scope,$state,Authentication,menuService){var vm=this;vm.authentication=Authentication}angular.module("core").controller("AdminDashboardController",AdminDashboardController),AdminDashboardController.$inject=["$scope","$state","Authentication","menuService"]}();
!function(){"use strict";function AdminHeaderController($scope,$state,Authentication,menuService){var vm=this;vm.authentication=Authentication}angular.module("core").controller("AdminHeaderController",AdminHeaderController),AdminHeaderController.$inject=["$scope","$state","Authentication","menuService"]}();
!function(){"use strict";function AdminSidebarController($scope,$state,Authentication,menuService){var vm=this;vm.authentication=Authentication}angular.module("core").controller("AdminSidebarController",AdminSidebarController),AdminSidebarController.$inject=["$scope","$state","Authentication","menuService"]}();
!function(){"use strict";function authInterceptor($q,$injector,Authentication){function responseError(rejection){if(!rejection.config.ignoreAuthModule){var Notification=$injector.get("Notification");switch(rejection.status){case 400:Notification.error({message:rejection.data.message,title:"Bad Request!",delay:5e3});break;case 401:Authentication.user=null,$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden");break;case 404:$injector.get("$state").go("not-found",{message:rejection.data.message});break;case-1:Notification.error({message:"No response received from server. Please try again later.",title:"Error processing request!",delay:5e3})}}return $q.reject(rejection)}var service={responseError:responseError};return service}angular.module("core").factory("authInterceptor",authInterceptor),authInterceptor.$inject=["$q","$injector","Authentication"]}();
!function(){"use strict";function UserAddController($scope,$state,UsersService,$location,$window,Authentication,PasswordValidator,Notification){function signup(isValid){return isValid?void UsersService.userSignup(vm.credentials).then(onUserSignupSuccess).catch(onUserSignupError):($scope.$broadcast("show-errors-check-validity","vm.userForm"),!1)}function onUserSignupSuccess(response){Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> User add successful!'}),$state.go("admin.user-add")}function onUserSignupError(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Signup Error!',delay:6e3})}var vm=this;vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.signup=signup,vm.usernameRegex=/^(?=[\w.-]+$)(?!.*[._-]{2})(?!\.)(?!.*\.$).{3,34}$/,$location.search().err&&Notification.error({message:$location.search().err})}angular.module("users").controller("UserAddController",UserAddController),UserAddController.$inject=["$scope","$state","UsersService","$location","$window","Authentication","PasswordValidator","Notification"]}();
!function(){"use strict";function UserListController($scope,$filter,AdminService){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=15,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.users,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,AdminService.query(function(data){vm.users=data,vm.buildPager()})}angular.module("users.admin").controller("UserListController",UserListController),UserListController.$inject=["$scope","$filter","AdminService"]}();
!function(){"use strict";function UserController($scope,$state,$window,Authentication,user,Notification){function remove(user){$window.confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),vm.users.splice(vm.users.indexOf(user),1),Notification.success("User deleted successfully!")):vm.user.$remove(function(){$state.go("admin.users"),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> User deleted successfully!'})}))}function update(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=vm.user;user.$update(function(){$state.go("admin.user",{userId:user._id}),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> User saved successfully!'})},function(errorResponse){Notification.error({message:errorResponse.data.message,title:'<i class="glyphicon glyphicon-remove"></i> User update error!'})})}function isContextUserSelf(){return vm.user.username===vm.authentication.user.username}var vm=this;vm.authentication=Authentication,vm.user=user,vm.remove=remove,vm.update=update,vm.isContextUserSelf=isContextUserSelf}angular.module("users.admin").controller("UserController",UserController),UserController.$inject=["$scope","$state","$window","Authentication","userResolve","Notification"]}();
!function(){"use strict";function AddProfessorsController($scope,$http,Notification,PapaParse,DepartmentsService,ProfessorsService,Authentication){function fileParseComplete(results,file){Notification.success({message:(linesParsed-1).toString()+" records imported"}),linesParsed=0}function parseSingleRecord(results,parser){if(results.errors.length)return void Notification.error({message:"Cannot save a data"});if(linesParsed+=1,1!==linesParsed){var professor=new ProfessorsService;professor.firstName=results.data[0][0],professor.lastName=results.data[0][1],professor.department=vm.department,professor.email=results.data[0][2],professor.username=results.data[0][3],professor.$save(function(res){},function(){Notification.error("Cannot save the record "+professor.firstName)})}}var vm=this,linesParsed=0;vm.authentication=Authentication,vm.department=void 0,vm.departments=DepartmentsService.query(),vm.csvFiles={},vm.parseAndImport=function(){if(vm.csvFiles&&vm.department){var config={header:!1,skipEmptyLines:!0,step:parseSingleRecord,complete:fileParseComplete};PapaParse.parse(vm.csvFiles[0],config)}else vm.csvFiles&&Notification.error({message:"Select a department"})}}angular.module("users").controller("AddProfessorsController",AddProfessorsController),AddProfessorsController.$inject=["$scope","$http","Notification","PapaParse","DepartmentsService","ProfessorsService","Authentication"]}();
!function(){"use strict";function EditProfessorsController($scope,$state,$window,Authentication,professor,DepartmentsService){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.professor.$remove($state.go("admin.professors.list"))}function save(isValid){function successCallback(res){$state.go("admin.professors.list")}function errorCallback(res){vm.error=res.data.message}return isValid?(vm.isHOD&&(vm.professor.roles=["hod"]),void(vm.professor._id?vm.professor.$update(successCallback,errorCallback):vm.professor.$save(successCallback,errorCallback))):($scope.$broadcast("show-errors-check-validity","vm.form.professorForm"),!1)}var vm=this;vm.authentication=Authentication,vm.departments=DepartmentsService.query(),vm.professor=professor,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.isHOD=!1}angular.module("users").controller("EditProfessorsController",EditProfessorsController),EditProfessorsController.$inject=["$scope","$state","$window","Authentication","userResolve","DepartmentsService"]}();
!function(){"use strict";function ListProfessorsController(ProfessorsService){var vm=this;vm.professors=ProfessorsService.query()}angular.module("users").controller("ListProfessorsController",ListProfessorsController),ListProfessorsController.$inject=["ProfessorsService"]}();
!function(){"use strict";function ChangePasswordController($scope,$http,Authentication,UsersService,PasswordValidator,Notification){function changeUserPassword(isValid){return isValid?void UsersService.changePassword(vm.passwordDetails).then(onChangePasswordSuccess).catch(onChangePasswordError):($scope.$broadcast("show-errors-check-validity","vm.passwordForm"),!1)}function onChangePasswordSuccess(response){Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Password Changed Successfully'}),vm.passwordDetails=null}function onChangePasswordError(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Password change failed!'})}var vm=this;vm.user=Authentication.user,vm.changeUserPassword=changeUserPassword,vm.getPopoverMsg=PasswordValidator.getPopoverMsg}angular.module("users").controller("ChangePasswordController",ChangePasswordController),ChangePasswordController.$inject=["$scope","$http","Authentication","UsersService","PasswordValidator","Notification"]}();
!function(){"use strict";function ChangeProfilePictureController($timeout,Authentication,Upload,Notification){function onSuccessItem(response){Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Successfully changed profile picture'}),vm.user=Authentication.user=response,vm.fileSelected=!1,vm.progress=0}function onErrorItem(response){vm.fileSelected=!1,vm.progress=0,Notification.error({message:response.message,title:'<i class="glyphicon glyphicon-remove"></i> Failed to change profile picture'})}var vm=this;vm.user=Authentication.user,vm.progress=0,vm.upload=function(dataUrl){Upload.upload({url:"/api/users/picture",data:{newProfilePicture:dataUrl}}).then(function(response){$timeout(function(){onSuccessItem(response.data)})},function(response){response.status>0&&onErrorItem(response.data)},function(evt){vm.progress=parseInt(100*evt.loaded/evt.total,10)})}}angular.module("users").controller("ChangeProfilePictureController",ChangeProfilePictureController),ChangeProfilePictureController.$inject=["$timeout","Authentication","Upload","Notification"]}();
!function(){"use strict";function EditProfileController($scope,$http,$location,UsersService,Authentication,Notification){function updateUserProfile(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=new UsersService(vm.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","vm.userForm"),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Edit profile successful!'}),Authentication.user=response},function(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Edit profile failed!'})})}var vm=this;vm.user=Authentication.user,vm.updateUserProfile=updateUserProfile}angular.module("users").controller("EditProfileController",EditProfileController),EditProfileController.$inject=["$scope","$http","$location","UsersService","Authentication","Notification"]}();
!function(){"use strict";function SocialAccountsController($state,$window,UsersService,Authentication,Notification){function hasConnectedAdditionalSocialAccounts(){return vm.user.additionalProvidersData&&Object.keys(vm.user.additionalProvidersData).length}function isConnectedSocialAccount(provider){return vm.user.provider===provider||vm.user.additionalProvidersData&&vm.user.additionalProvidersData[provider]}function removeUserSocialAccount(provider){UsersService.removeSocialAccount(provider).then(onRemoveSocialAccountSuccess).catch(onRemoveSocialAccountError)}function onRemoveSocialAccountSuccess(response){Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Removed successfully!'}),vm.user=Authentication.user=response}function onRemoveSocialAccountError(response){Notification.error({message:response.message,title:'<i class="glyphicon glyphicon-remove"></i> Remove failed!'})}function callOauthProvider(url){url+="?redirect_to="+encodeURIComponent($state.$current.url.prefix),$window.location.href=url}var vm=this;vm.user=Authentication.user,vm.hasConnectedAdditionalSocialAccounts=hasConnectedAdditionalSocialAccounts,vm.isConnectedSocialAccount=isConnectedSocialAccount,vm.removeUserSocialAccount=removeUserSocialAccount,vm.callOauthProvider=callOauthProvider}angular.module("users").controller("SocialAccountsController",SocialAccountsController),SocialAccountsController.$inject=["$state","$window","UsersService","Authentication","Notification"]}();
!function(){"use strict";function SettingsController($scope,Authentication){var vm=this;vm.user=Authentication.user}angular.module("users").controller("SettingsController",SettingsController),SettingsController.$inject=["$scope","Authentication"]}();
!function(){"use strict";function AddStudentsController($scope,$http,Notification,PapaParse,DepartmentsService,StudentsService,Authentication){function fileParseComplete(results,file){Notification.success({message:(linesParsed-1).toString()+" records imported"}),linesParsed=0}function parseSingleRecord(results,parser){if(results.errors.length)return void Notification.error({message:"Cannot save a data"});if(linesParsed+=1,1!==linesParsed){var student=new StudentsService;student.firstName=results.data[0][0],student.lastName=results.data[0][1],student.department=vm.department,student.email=results.data[0][2],student.username=results.data[0][3],student.metaData.regno=results.data[0][4],student.metaData.batch=results.data[0][5],student.metaData.semester=results.data[0][6],student.$save(function(res){},function(){Notification.error("Cannot save the record "+student.metaData.regno)})}}var vm=this,linesParsed=0;vm.authentication=Authentication,vm.department=void 0,vm.departments=DepartmentsService.query(),vm.csvFiles={},vm.parseAndImport=function(){if(vm.csvFiles&&vm.department){var config={header:!1,skipEmptyLines:!0,step:parseSingleRecord,complete:fileParseComplete};PapaParse.parse(vm.csvFiles[0],config)}else vm.csvFiles&&Notification.error({message:"Select a department"})}}angular.module("users").controller("AddStudentsController",AddStudentsController),AddStudentsController.$inject=["$scope","$http","Notification","PapaParse","DepartmentsService","StudentsService","Authentication"]}();
!function(){"use strict";function EditStudentsController($scope,$state,$window,Authentication,student,DepartmentsService){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.student.$remove($state.go("admin.students.list"))}function save(isValid){function successCallback(res){$state.go("admin.students.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.student._id?vm.student.$update(successCallback,errorCallback):vm.student.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.studentForm"),!1)}var vm=this;vm.authentication=Authentication,vm.departments=DepartmentsService.query(),vm.student=student,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("users").controller("EditStudentsController",EditStudentsController),EditStudentsController.$inject=["$scope","$state","$window","Authentication","userResolve","DepartmentsService"]}();
!function(){"use strict";function ListStudentsController(StudentsService){var vm=this;vm.students=StudentsService.query()}angular.module("users").controller("ListStudentsController",ListStudentsController),ListStudentsController.$inject=["StudentsService"]}();
!function(){"use strict";function templates($templateCache){$templateCache.put("modules/core/client/views/400.client.view.html",'<div class="page-header">\r\n  <h1>Bad Request</h1>\r\n</div>\r\n<div class="alert alert-danger" role="alert">\r\n  <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>\r\n  <span class="sr-only">Error:</span>\r\n  <span ng-if="vm.errorMessage" ng-bind="vm.errorMessage"></span>\r\n  <span ng-if="!vm.errorMessage">You made a bad request</span>\r\n</div>\r\n'),$templateCache.put("modules/core/client/views/403.client.view.html",'<div class="page-header">\r\n  <h1>Forbidden</h1>\r\n</div>\r\n<div class="alert alert-danger" role="alert">\r\n  <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>\r\n  <span class="sr-only">Error:</span>\r\n  You are not authorized to access this resource\r\n</div>\r\n'),$templateCache.put("modules/core/client/views/404.client.view.html",'<div class="page-header">\r\n  <h1>Page Not Found</h1>\r\n</div>\r\n<div class="alert alert-danger" role="alert">\r\n  <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>\r\n  <span ng-if="vm.errorMessage" ng-bind="vm.errorMessage"></span>\r\n  <span ng-if="!vm.errorMessage">Page Not Found</span>\r\n</div>\r\n'),$templateCache.put("modules/core/client/views/featured.client.view.html",'<div id="featured-content-slider" class="carousel slide" data-ride="carousel">\r\n    <!-- Indicators -->\r\n    <ol class="carousel-indicators">\r\n        <li data-target="#featured-content-slider" data-slide-to="0" class="active"></li>\r\n        <li data-target="#featured-content-slider" data-slide-to="1"></li>\r\n        <li data-target="#featured-content-slider" data-slide-to="2"></li>\r\n        <li data-target="#featured-content-slider" data-slide-to="3"></li>\r\n    </ol>\r\n\r\n    <!-- Wrapper for slides -->\r\n    <div class="carousel-inner" role="listbox">\r\n        <div class="item active">\r\n            <img src="/dist/img/sliders/1.jpg">\r\n        </div>\r\n\r\n        <div class="item">\r\n            <img src="/dist/img/sliders/2.jpg">\r\n        </div>\r\n\r\n        <div class="item">\r\n            <img src="/dist/img/sliders/1.jpg">\r\n        </div>\r\n\r\n        <div class="item">\r\n            <img src="/dist/img/sliders/2.jpg">\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Left and right controls -->\r\n    <a class="left carousel-control" href="#featured-content-slider" role="button" data-slide="prev">\r\n        <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>\r\n        <span class="sr-only">Previous</span>\r\n    </a>\r\n    <a class="right carousel-control" href="#featured-content-slider" role="button" data-slide="next">\r\n        <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>\r\n        <span class="sr-only">Next</span>\r\n    </a>\r\n</div>'),$templateCache.put("modules/core/client/views/header.client.view.html",'<div class="container" ng-controller="HeaderController as vm">\r\n  <div class="navbar-header">\r\n    <button class="navbar-toggle" type="button" ng-click="vm.isCollapsed = !vm.isCollapsed">\r\n      <span class="sr-only">Toggle navigation</span>\r\n      <span class="icon-bar"></span>\r\n      <span class="icon-bar"></span>\r\n      <span class="icon-bar"></span>\r\n    </button>\r\n    <a ui-sref="home" class="navbar-brand">AEC</a>\r\n  </div>\r\n  <nav class="navbar-collapse" uib-collapse="!vm.isCollapsed" role="navigation">\r\n    <ul class="nav navbar-nav" ng-if="vm.menu.shouldRender(vm.authentication.user);">\r\n      <li ng-repeat="item in vm.menu.items | orderBy: \'position\'" ng-if="item.shouldRender(vm.authentication.user);" ng-switch="item.type" ng-class="{ dropdown: item.type === \'dropdown\' }" ui-sref-active="active" class="{{item.class}}" uib-dropdown="item.type === \'dropdown\'">\r\n        <a ng-switch-when="dropdown" class="dropdown-toggle" uib-dropdown-toggle role="button">{{::item.title}}&nbsp;<span class="caret"></span></a>\r\n        <ul ng-switch-when="dropdown" class="dropdown-menu">\r\n          <li ng-repeat="subitem in item.items | orderBy: \'position\'" ng-if="subitem.shouldRender(vm.authentication.user);">\r\n            <a ui-sref="{{subitem.state}}({{subitem.params}})" ng-bind="subitem.title"></a>\r\n          </li>\r\n        </ul>\r\n        <a ng-switch-default ui-sref="{{item.state}}" ng-bind="item.title"></a>\r\n      </li>\r\n    </ul>\r\n    <ul class="nav navbar-nav navbar-right" ng-hide="vm.authentication.user">\r\n      <!--<li ui-sref-active="active">\r\n        <a ui-sref="authentication.signup">Sign Up</a>\r\n      </li>\r\n      <li class="divider-vertical"></li>-->\r\n      <li ui-sref-active="active">\r\n        <a ui-sref="admin.dashboard">Sign In</a>\r\n      </li>\r\n    </ul>\r\n    <ul class="nav navbar-nav navbar-right" ng-show="vm.authentication.user">\r\n      <li class="dropdown" uib-dropdown>\r\n        <a class="dropdown-toggle user-header-dropdown-toggle" uib-dropdown-toggle role="button">\r\n          <img ng-src="/{{vm.authentication.user.profileImageURL}}" alt="{{vm.authentication.user.displayName}}" class="header-profile-image" />\r\n          <span ng-bind="vm.authentication.user.displayName"></span> <b class="caret"></b>\r\n        </a>\r\n        <ul class="dropdown-menu" role="menu">\r\n          <li ui-sref-active="active" ng-repeat="item in vm.accountMenu.items">\r\n            <a ui-sref="{{item.state}}" ng-bind="item.title"></a>\r\n          </li>\r\n          <li class="divider"></li>\r\n          <li>\r\n            <a href="/api/auth/signout" target="_self">Signout</a>\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n</div>\r\n'),$templateCache.put("modules/core/client/views/home.client.view.html",'<div ng-include="\'/modules/core/client/views/featured.client.view.html\'" class="featured-content"></div>\r\n'),$templateCache.put("modules/attendances/client/views/form-attendance.client.view.html",'<div class="content-header">\n  <h1>{{vm.attendance._id ? \'Edit Attendance\' : \'New Attendance\'}}</h1>\n</div>\n<section class="content body">\n  <form name="vm.form.attendanceForm" ng-submit="vm.save(vm.form.attendanceForm.$valid)" novalidate>\n    <fieldset>\n      <div class="form-group" show-errors>\n        <label class="control-label" for="name">Name</label>\n        <input name="name" type="text" ng-model="vm.attendance.name" id="name" class="form-control" placeholder="Name" required>\n        <div ng-messages="vm.form.attendanceForm.name.$error" role="alert">\n          <p class="help-block error-text" ng-message="required">Attendance name is required.</p>\n        </div>\n      </div>\n      <div class="form-group" show-errors>\n        <label class="control-label" for="code">Code</label>\n        <input name="code" type="text" ng-model="vm.attendance.code" id="code" class="form-control" placeholder="Code" required>\n        <div ng-messages="vm.form.attendanceForm.code.$error" role="alert">\n          <p class="help-block error-text" ng-message="required">Attendance code is required.</p>\n        </div>\n      </div>\n      <div class="form-group">\n        <button type="submit" class="btn btn-primary">{{vm.attendance._id ? \'Update\' : \'Add\'}} Attendance</button>\n        <button class="btn btn-danger" ng-click="vm.remove()">\n          <i class="glyphicon glyphicon-trash"></i> Delete\n        </button>\n      </div>\n      <div ng-show="vm.error" class="text-danger">\n        <strong ng-bind="vm.error"></strong>\n      </div>\n    </fieldset>\n  </form>\n</section>\n'),$templateCache.put("modules/attendances/client/views/list-attendances.client.view.html",'<div class="content-header">\n  <h1>Daily Attendance</h1>\n</div>\n<section class="content body">\n  <ul class="list-group">\n    <li ng-repeat="assignment in vm.assignments"\n       class="list-group-item">\n      <h4 class="list-group-item-heading">\n        {{ assignment.course.name }}\n        <div class="btn-group btn-xs pull-right">\n          <a class="btn btn-primary"\n            ui-sref="admin.attendances.mark({ assignmentId: assignment._id })">\n            <i class="glyphicon glyphicon-edit"></i> Mark\n          </a>\n          <a class="btn btn-default"\n            ui-sref="admin.attendances.mark({ assignmentId: assignment._id })">\n            <i class="glyphicon glyphicon-edit"></i> View\n          </a>\n        </div>\n      </h4>\n      <div class="list-group-item-content">\n        Code: {{ assignment.course.code }}\n      </div>\n    </li>\n  </ul>\n</section>\n'),$templateCache.put("modules/attendances/client/views/mark-attendance.client.view.html",'<div class="content-header">\r\n  <h1>Mark Attendance <small>{{vm.course.name}}</small></h1>\r\n</div>\r\n<section class="content body">\r\n  <div class="row">\r\n    <form name="vm.form.attendanceForm" novalidate>\r\n      <fieldset>\r\n        <div class="col-md-4">\r\n          <div class="form-group" show-errors>\r\n            <label class="control-label" for="date">Date</label>\r\n            <input name="date" type="date" ng-model="vm.date" id="date" class="form-control" placeholder="Date" required>\r\n            <div ng-messages="vm.form.attendanceForm.date.$error" role="alert">\r\n              <p class="help-block error-text" ng-message="required">Date is required.</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class="col-md-4">\r\n          <div class="form-group">\r\n            <label class="control-label">&nbsp;</label>\r\n            <div>\r\n                <button class="btn btn-primary" ng-click="vm.fetchAttendances()">Fetch</button>\r\n            </div>\r\n          </div>\r\n          <div ng-show="vm.error" class="text-danger">\r\n            <strong ng-bind="vm.error"></strong>\r\n          </div>\r\n        </div>\r\n      </fieldset>\r\n    </form>\r\n  </div>\r\n  <ul ng-show="vm.attendances.length" class="list-group">\r\n    <li ng-repeat="attendance in vm.attendances"\r\n       class="list-group-item">\r\n      <h4 class="list-group-item-heading">\r\n        {{ attendance.student.displayName }}\r\n        <div class="pull-right">\r\n            <toggle ng-model="attendance.status"></toggle>\r\n        </div>\r\n      </h4>\r\n      <div class="list-group-item-content">\r\n          Registration Number: {{ attendance.student.metaData.regno }}\r\n      </div>\r\n    </li>\r\n  </ul>\r\n  <button ng-show="vm.attendances.length" class="btn btn-primary btn-lg" ng-click="vm.saveAttendance()">Save</button>\r\n</section>\r\n'),$templateCache.put("modules/departments/client/views/form-department.client.view.html",'<div class="content-header">\n  <h1>{{vm.department._id ? \'Edit Department\' : \'New Department\'}}</h1>\n</div>\n<section class="content body">\n  <form name="vm.form.departmentForm" ng-submit="vm.save(vm.form.departmentForm.$valid)" novalidate>\n    <fieldset>\n      <div class="form-group" show-errors>\n        <label class="control-label" for="name">Name</label>\n        <input name="name" type="text" ng-model="vm.department.name" id="name" class="form-control" placeholder="Name" required>\n        <div ng-messages="vm.form.departmentForm.name.$error" role="alert">\n          <p class="help-block error-text" ng-message="required">Department name is required.</p>\n        </div>\n      </div>\n      <div class="form-group" show-errors>\n        <label class="control-label" for="code">Code</label>\n        <input name="code" type="text" ng-model="vm.department.code" id="code" class="form-control" placeholder="Code" required>\n        <div ng-messages="vm.form.departmentForm.code.$error" role="alert">\n          <p class="help-block error-text" ng-message="required">Department code is required.</p>\n        </div>\n      </div>\n      <div class="form-group">\n        <button type="submit" class="btn btn-primary">{{vm.department._id ? \'Update\' : \'Add\'}} Department</button>\n        <button class="btn btn-danger" ng-click="vm.remove()">\n          <i class="glyphicon glyphicon-trash"></i> Delete\n        </button>\n      </div>\n      <div ng-show="vm.error" class="text-danger">\n        <strong ng-bind="vm.error"></strong>\n      </div>\n    </fieldset>\n  </form>\n</section>\n'),$templateCache.put("modules/departments/client/views/list-departments.client.view.html",'<div class="content-header">\n  <h1>Departments\n  <small ng-if="vm.departments.$resolved && !vm.departments.length" class="pull-right">\n    <a ui-sref="admin.departments.create" class="btn btn-xs btn-primary">Create a department</a>\n  </small></h1>\n</div>\n<section class="content body">\n  <ul class="list-group">\n    <li ng-repeat="department in vm.departments"\n       class="list-group-item">\n      <h4 class="list-group-item-heading">\n        {{ department.name }}\n        <div class="btn-group btn-xs pull-right">\n          <a class="btn btn-primary"\n            ui-sref="admin.departments.edit({ departmentId: department._id })">\n            <i class="glyphicon glyphicon-edit"></i> Edit\n          </a>\n        </div>\n      </h4>\n      <div class="list-group-item-content">\n        Code: {{ department.code }}\n      </div>\n    </li>\n  </ul>\n</section>\n'),$templateCache.put("modules/courses/client/views/form-assignment.client.view.html",'<div class="content-header">\n  <h1>{{vm.assignment._id ? \'Edit Assignment\' : \'New Assignment\'}}</h1>\n</div>\n<section class="content body">\n  <form name="vm.form.assignmentForm" ng-submit="vm.save(vm.form.assignmentForm.$valid)" novalidate>\n    <fieldset>\n      <div class="form-group">\n        <label for="course">Assign Course</label>\n        <select class="form-control" ng-model="vm.assignment.course" required>\n            <option ng-repeat="course in vm.courses" value="{{course._id}}" ng-selected="{{course._id == vm.assignment.course._id}}">{{course.name}}</option>\n        </select>\n        <div ng-messages="vm.form.assignmentForm.course.$error" role="alert">\n          <p class="help-block error-text" ng-message="required">Course is required.</p>\n        </div>\n      </div>\n      <div class="form-group">\n        <label for="professor">To Professor</label>\n        <select class="form-control" ng-model="vm.assignment.professor" required>\n            <option ng-repeat="professor in vm.professors" value="{{professor._id}}" ng-selected="{{professor._id == vm.assignment.professor._id}}">{{professor.displayName}} ({{professor.department.name}})</option>\n        </select>\n        <div ng-messages="vm.form.assignmentForm.professor.$error" role="alert">\n          <p class="help-block error-text" ng-message="required">Professor is required.</p>\n        </div>\n      </div>\n      <div class="form-group" show-errors>\n        <label class="control-label" for="batch">For the Batch</label>\n        <input name="batch" type="number" min="1990" max="2100" ng-model="vm.assignment.batch" id="batch" class="form-control" placeholder="Batch" required>\n        <div ng-messages="vm.form.assignmentForm.batch.$error" role="alert">\n          <p class="help-block error-text" ng-message="required">Batch is required.</p>\n        </div>\n      </div>\n      <div class="form-group">\n        <button type="submit" class="btn btn-primary">{{vm.assignment._id ? \'Update\' : \'Add\'}} Assignment</button>\n        <button ng-show="vm.assignment._id" class="btn btn-danger" ng-click="vm.remove()">\n          <i class="glyphicon glyphicon-trash"></i> Delete\n        </button>\n      </div>\n      <div ng-show="vm.error" class="text-danger">\n        <strong ng-bind="vm.error"></strong>\n      </div>\n    </fieldset>\n  </form>\n</section>\n'),$templateCache.put("modules/courses/client/views/form-course.client.view.html",'<div class="content-header">\n  <h1>{{vm.course._id ? \'Edit Course\' : \'New Course\'}}</h1>\n</div>\n<section class="content body">\n  <form name="vm.form.courseForm" ng-submit="vm.save(vm.form.courseForm.$valid)" novalidate>\n    <fieldset>\n      <div class="form-group" show-errors>\n        <label class="control-label" for="name">Name</label>\n        <input name="name" type="text" ng-model="vm.course.name" id="name" class="form-control" placeholder="Name" required>\n        <div ng-messages="vm.form.courseForm.name.$error" role="alert">\n          <p class="help-block error-text" ng-message="required">Course name is required.</p>\n        </div>\n      </div>\n      <div class="form-group" show-errors>\n        <label class="control-label" for="code">Code</label>\n        <input name="code" type="text" ng-model="vm.course.code" id="code" class="form-control" placeholder="Code" required>\n        <div ng-messages="vm.form.courseForm.code.$error" role="alert">\n          <p class="help-block error-text" ng-message="required">Course code is required.</p>\n        </div>\n      </div>\n      <div class="form-group">\n          <label for="department">Department</label>\n          <select class="form-control" ng-model="vm.course.department">\n              <option ng-repeat="dept in vm.departments" value="{{dept._id}}" ng-selected="{{dept._id == vm.course.department._id}}">{{dept.name}}</option>\n          </select>\n        <div ng-messages="vm.form.courseForm.code.$error" role="alert">\n          <p class="help-block error-text" ng-message="required">Department is required.</p>\n        </div>\n      </div>\n      <div class="form-group" show-errors>\n        <label class="control-label" for="semester">Semester</label>\n        <input name="semester" type="number" min="1" max="8" ng-model="vm.course.semester" id="semester" class="form-control" placeholder="Semester" required>\n        <div ng-messages="vm.form.courseForm.semester.$error" role="alert">\n          <p class="help-block error-text" ng-message="required">Semester is required.</p>\n        </div>\n      </div>\n      <div class="form-group">\n        <button type="submit" class="btn btn-primary">{{vm.course._id ? \'Update\' : \'Add\'}} Course</button>\n        <button class="btn btn-danger" ng-click="vm.remove()">\n          <i class="glyphicon glyphicon-trash"></i> Delete\n        </button>\n      </div>\n      <div ng-show="vm.error" class="text-danger">\n        <strong ng-bind="vm.error"></strong>\n      </div>\n    </fieldset>\n  </form>\n</section>\n'),$templateCache.put("modules/courses/client/views/list-assignments.client.view.html",'<div class="content-header">\n  <h1>Assignments\n  <small ng-if="vm.assignments.$resolved && !vm.assignments.length" class="pull-right">\n    <a ui-sref="admin.assignments.create" class="btn btn-xs btn-primary">Create a assignment</a>\n  </small></h1>\n</div>\n<section class="content body">\n  <ul class="list-group">\n    <li ng-repeat="assignment in vm.assignments"\n       class="list-group-item">\n      <h4 class="list-group-item-heading">\n        {{assignment.course.code}} - {{ assignment.course.name }}\n        <div class="btn-group btn-xs pull-right">\n          <a class="btn btn-primary"\n            ui-sref="admin.assignments.edit({ assignmentId: assignment._id })">\n            <i class="glyphicon glyphicon-edit"></i> Edit\n          </a>\n        </div>\n      </h4>\n      <div class="list-group-item-content">\n          <span class="label label-primary">Professor: {{ assignment.professor.displayName }}</span>\n          <span class="label label-primary">Batch: {{ assignment.batch }}</span>\n      </div>\n    </li>\n  </ul>\n</section>\n'),$templateCache.put("modules/courses/client/views/list-courses.client.view.html",'<div class="content-header">\n  <h1>Courses\n  <small ng-if="vm.courses.$resolved && !vm.courses.length" class="pull-right">\n    <a ui-sref="admin.courses.create" class="btn btn-xs btn-primary">Create a course</a>\n  </small></h1>\n</div>\n<section class="content body">\n  <ul class="list-group">\n    <li ng-repeat="course in vm.courses"\n       class="list-group-item">\n      <h4 class="list-group-item-heading">\n        {{ course.name }}\n        <div class="btn-group btn-xs pull-right">\n          <a class="btn btn-primary"\n            ui-sref="admin.courses.edit({ courseId: course._id })">\n            <i class="glyphicon glyphicon-edit"></i> Edit\n          </a>\n        </div>\n      </h4>\n      <div class="list-group-item-content">\n          <span class="label label-primary">Code: {{ course.code }}</span>\n          <span class="label label-primary">Semester: {{ course.semester }}</span>\n          <span class="label label-primary">Department: {{ course.department.name }}</span>\n      </div>\n    </li>\n  </ul>\n</section>\n'),$templateCache.put("modules/pages/client/views/form-page.client.view.html",'<div class="content-header">\n  <h1>{{vm.page._id ? \'Edit Page\' : \'New Page\'}}</h1>\n</div>\n<section class="content body">\n  <form name="vm.form.pageForm"  ng-submit="vm.save(vm.form.pageForm.$valid)" novalidate>\n    <fieldset>\n      <div class="form-group" show-errors>\n        <label class="control-label" for="title">Title</label>\n        <input name="title" type="text" ng-model="vm.page.title" id="title" class="form-control" placeholder="Title" required>\n        <div ng-messages="vm.form.pageForm.title.$error" role="alert">\n          <p class="help-block error-text" ng-message="required">Page title is required.</p>\n        </div>\n      </div>\n      <div class="form-group" show-errors>\n        <label class="control-label" for="content">Content</label>\n        <textarea name="content" ui-tinymce="vm.tinymceOptions" ng-model="vm.page.content" id="content" class="form-control" placeholder="Content">\n        </textarea>\n        <div ng-messages="vm.form.pageForm.content.$error" role="alert">\n          <p class="help-block error-text" ng-message="required">Page content is required.</p>\n        </div>\n      </div>\n      <div class="form-group">\n        <button type="submit" class="btn btn-primary">{{vm.page._id ? \'Update\' : \'Create\'}}</button>\n        <button type="submit" class="btn btn-danger" ng-click="vm.remove()" ng-show="vm.page._id">Delete</button>\n      </div>\n      <div ng-show="vm.error" class="text-danger">\n        <strong ng-bind="vm.error"></strong>\n      </div>\n    </fieldset>\n  </form>\n</section>\n'),$templateCache.put("modules/pages/client/views/list-pages.client.view.html",'<div class="content-header">\n  <h1>Pages\n  <small class="pull-right">\n    <a ui-sref="admin.pages.create" class="btn btn-xs btn-primary">Create a page</a>\n  </small></h1>\n</div>\n<section class="content body">\n  <div class="list-group">\n    <a ng-repeat="page in vm.pages"\n       ui-sref="admin.pages.edit({ pageId: page._id })"\n       class="list-group-item">\n      <h4 class="list-group-item-heading" ng-bind="page.title"></h4>\n    </a>\n  </div>\n</section>'),$templateCache.put("modules/pages/client/views/view-page.client.view.html",'<section>\n  <div class="page-header">\n    <h1 ng-bind="vm.page.title"></h1>\n  </div>\n  <div class="pull-right"\n       ng-show="vm.page.isCurrentUserOwner">\n    <a class="btn btn-primary"\n       ui-sref="pages.edit({ pageId: vm.page._id })">\n      <i class="glyphicon glyphicon-edit"></i>\n    </a>\n    <a class="btn btn-primary" ng-click="vm.remove()">\n      <i class="glyphicon glyphicon-trash"></i>\n    </a>\n  </div>\n  <small>\n    <em class="text-muted">\n      Posted on\n      <span ng-bind="vm.page.created | date:\'mediumDate\'"></span>\n    </em>\n  </small>\n  <div ng-bind-html="vm.page.content"></div>\n  <p class="lead" ng-bind="vm.page.content"></p>\n</section>\n'),$templateCache.put("modules/core/client/views/admin/header.client.view.html",'<a ui-sref="admin.dashboard" class="logo">Dashboard</a>\r\n<nav ng-show="vm.authentication.user" class="navbar navbar-static-top" role="navigation">\r\n<div class="navbar-custom-menu">\r\n    <ul class="nav navbar-nav">\r\n    <li class="dropdown user user-menu">\r\n        <a href="#" class="dropdown-toggle" data-toggle="dropdown">\r\n        <img src="/{{vm.authentication.user.profileImageURL}}" class="user-image" alt="User Image">\r\n        <span class="hidden-xs">{{vm.authentication.user.displayName}}</span>\r\n        </a>\r\n        <ul class="dropdown-menu">\r\n        <!-- User image -->\r\n        <li class="user-header">\r\n            <img src="/{{vm.authentication.user.profileImageURL}}" class="img-circle" alt="User Image">\r\n            <p>\r\n            {{vm.authentication.user.displayName}}\r\n            <small>{{vm.authentication.user.department.name}}</small>\r\n            </p>\r\n        </li>\r\n        <!-- Menu Footer-->\r\n        <li class="user-footer">\r\n            <div class="pull-left">\r\n            </div>\r\n            <div class="pull-right">\r\n                <a href="/api/auth/signout" target="_self" class="btn btn-default">Signout</a>\r\n            </div>\r\n        </li>\r\n        </ul>\r\n    </li>\r\n    </ul>\r\n</div>\r\n</nav>'),$templateCache.put("modules/core/client/views/admin/home.client.view.html",""),$templateCache.put("modules/core/client/views/admin/sidebar.client.view.html",'<div class="sidebar">\r\n<div ng-show="vm.authentication.user" class="user-panel">\r\n    <div class="pull-left image">\r\n    <img src="/{{vm.authentication.user.profileImageURL}}" class="img-circle" alt="{{vm.authentication.user.displayName}}">\r\n    </div>\r\n    <div class="pull-left info">\r\n        <p>{{vm.authentication.user.displayName}}</p>\r\n        <a href="/api/auth/signout">Sign out</a>\r\n    </div>\r\n</div>\r\n\r\n\r\n<!-- Sidebar Menu -->\r\n<ul ng-show="vm.authentication.user" class="sidebar-menu">\r\n    <li ui-sref-active="active"><a ui-sref="admin.dashboard"><span>Overview</span></a></li>\r\n    <li ng-show="vm.authentication.user.roles.indexOf(\'admin\') >= 0" ui-sref-active="active">\r\n        <a ui-sref="admin.pages.list"><span>Pages</span> <i class="fa fa-angle-left pull-right"></i></a>\r\n    </li>\r\n    <li ng-show="vm.authentication.user.roles.indexOf(\'professor\') >= 0 || vm.authentication.user.roles.indexOf(\'hod\') >= 0" class="treeview">\r\n        <a href="#"><span>Attendance</span> <i class="fa fa-angle-left pull-right"></i></a>\r\n        <ul class="treeview-menu">\r\n            <li ui-sref-active="active"><a ui-sref="admin.attendances.list"><span>Daily Attendance</span></a></li>\r\n            <!--<li ui-sref-active="active"><a ui-sref="admin.attendances.view"><span>View Report</span></a></li>-->\r\n        </ul>\r\n    </li>\r\n    <li ng-show="vm.authentication.user.roles.indexOf(\'admin\') >= 0" class="treeview">\r\n        <a href="#"><span>Departments</span> <i class="fa fa-angle-left pull-right"></i></a>\r\n        <ul class="treeview-menu">\r\n            <li ui-sref-active="active"><a ui-sref="admin.departments.create"><span>Add Department</span></a></li>\r\n            <li ui-sref-active="active"><a ui-sref="admin.departments.list"><span>List Departments</span></a></li>\r\n        </ul>\r\n    </li>\r\n    <li ng-show="vm.authentication.user.roles.indexOf(\'hod\') >= 0" class="treeview">\r\n        <a href="#"><span>Courses</span> <i class="fa fa-angle-left pull-right"></i></a>\r\n        <ul class="treeview-menu">\r\n            <li ui-sref-active="active"><a ui-sref="admin.courses.create"><span>Add Courses</span></a></li>\r\n            <li ui-sref-active="active"><a ui-sref="admin.courses.list"><span>List Courses</span></a></li>\r\n        </ul>\r\n    </li>\r\n    <li ng-show="vm.authentication.user.roles.indexOf(\'professor\') >= 0 || vm.authentication.user.roles.indexOf(\'hod\') >= 0 || vm.authentication.user.roles.indexOf(\'admin\') >= 0" class="treeview">\r\n        <a href="#"><span>Professors</span> <i class="fa fa-angle-left pull-right"></i></a>\r\n        <ul class="treeview-menu">\r\n            <li ng-show="vm.authentication.user.roles.indexOf(\'hod\') >= 0 || vm.authentication.user.roles.indexOf(\'admin\') >= 0" ui-sref-active="active"><a ui-sref="admin.professors.create"><span>Add New</span></a></li>\r\n            <li ng-show="vm.authentication.user.roles.indexOf(\'hod\') >= 0 || vm.authentication.user.roles.indexOf(\'admin\') >= 0" ui-sref-active="active"><a ui-sref="admin.professors.add"><span>Import Professors</span></a></li>\r\n            <li ui-sref-active="active"><a ui-sref="admin.professors.list"><span>List Professors</span></a></li>\r\n            <li ng-show="vm.authentication.user.roles.indexOf(\'hod\') >= 0" ui-sref-active="active"><a ui-sref="admin.assignments.create"><span>Assign Courses</span></a></li>\r\n            <li ui-sref-active="active"><a ui-sref="admin.assignments.list"><span>View Course Assignments</span></a></li>\r\n        </ul>\r\n    </li>\r\n    <li ng-show="vm.authentication.user.roles.indexOf(\'professor\') >= 0 || vm.authentication.user.roles.indexOf(\'hod\') >= 0" class="treeview">\r\n        <a href="#"><span>Students</span> <i class="fa fa-angle-left pull-right"></i></a>\r\n        <ul class="treeview-menu">\r\n            <li ng-show="vm.authentication.user.roles.indexOf(\'hod\') >= 0" ui-sref-active="active"><a ui-sref="admin.students.create"><span>Add New</span></a></li>\r\n            <li ng-show="vm.authentication.user.roles.indexOf(\'hod\') >= 0" ui-sref-active="active"><a ui-sref="admin.students.add"><span>Import Students</span></a></li>\r\n            <li ui-sref-active="active"><a ui-sref="admin.students.list"><span>List Students</span></a></li>\r\n        </ul>\r\n    </li>\r\n</ul><!-- /.sidebar-menu -->\r\n\r\n<!-- Sidebar Menu -->\r\n<ul ng-hide="vm.authentication.user" class="sidebar-menu">\r\n    <li ui-sref-active="active"><a ui-sref="authentication.signin"><span>Login</span></a></li>\r\n    <li ui-sref-active="active"><a ui-sref="password.forgot"><span>Forgot Password</span></a></li>\r\n</ul><!-- /.sidebar-menu -->\r\n\r\n</div><!-- /.sidebar -->'),$templateCache.put("modules/users/client/views/admin/add-user.client.view.html",'<div class="content-header">\r\n  <h1>New Student</h1>\r\n</div>\r\n<section class="content body">\r\n  <form name="vm.userForm" ng-submit="vm.signup(vm.userForm.$valid)" class="signin" novalidate autocomplete="off">\r\n    <fieldset>\r\n      <div class="form-group" show-errors>\r\n        <label for="firstName">First Name</label>\r\n        <input type="text" id="firstName" name="firstName" class="form-control" ng-model="vm.credentials.firstName" placeholder="First Name" required autofocus>\r\n        <div ng-messages="vm.userForm.firstName.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">First name is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label for="lastName">Last Name</label>\r\n        <input type="text" id="lastName" name="lastName" class="form-control" ng-model="vm.credentials.lastName" placeholder="Last Name" required>\r\n        <div ng-messages="vm.userForm.lastName.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Last name is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label for="department">Department:</label>\r\n        <select id="department" name="department" class="form-control" ng-model="vm.credentials.department" required>\r\n          <option value="student">CSE</option>\r\n          <option value="professor">ECE</option>\r\n          <option value="hod">IT</option>\r\n        </select>\r\n        <div ng-messages="vm.userForm.department.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Department is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label for="username">Register Number</label>\r\n        <input type="text" id="username" name="username" class="form-control" ng-model="vm.credentials.username" ng-pattern="vm.usernameRegex" placeholder="Username" lowercase required>\r\n        <div ng-messages="vm.userForm.username.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Username is required.</p>\r\n          <p class="help-block error-text" ng-message="pattern">Please enter a valid username: 3+ characters long, non restricted word, characters "_-.", no consecutive dots, does not begin or end with dots, letters a-z and numbers 0-9.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label for="email">Email</label>\r\n        <input type="email" id="email" name="email" class="form-control" ng-model="vm.credentials.email" placeholder="Email" lowercase required>\r\n        <div ng-messages="vm.userForm.email.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Email address is required.</p>\r\n          <p class="help-block error-text" ng-message="email">Email address is invalid.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label for="password">Password</label>\r\n          <input type="password" id="password" name="password" class="form-control" ng-model="vm.credentials.password" placeholder="Password" uib-popover="{{vm.getPopoverMsg()}}" popover-trigger="outsideClick" password-validator required>\r\n        <div ng-messages="vm.userForm.password.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Password is required.</p>\r\n          <div ng-repeat="passwordError in passwordErrors">\r\n            <p class="help-block error-text" ng-show="vm.userForm.password.$error.requirements">{{passwordError}}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" ng-show="!vm.userForm.password.$error.required">\r\n        <label>Password Requirements</label>\r\n        <uib-progressbar value="requirementsProgress" type="{{requirementsColor}}"><span style="color:white; white-space:nowrap;">{{requirementsProgress}}%</span></uib-progressbar>\r\n      </div>\r\n      <div class="text-center form-group">\r\n        <button type="submit" class="btn btn-primary">Add User</button>\r\n      </div>\r\n    </fieldset>\r\n  </form>\r\n</section>\r\n'),
$templateCache.put("modules/users/client/views/admin/edit-user.client.view.html",'<div class="content-header">\r\n  <h1>User <span ng-bind="vm.user.username"></span></h1>\r\n</div>\r\n<section class="content body">\r\n  <form name="vm.userForm" ng-submit="vm.update(vm.userForm.$valid)" novalidate>\r\n    <fieldset>\r\n      <div class="form-group" show-errors>\r\n        <label for="firstName">First Name</label>\r\n        <input type="text" id="firstName" name="firstName" class="form-control" ng-model="vm.user.firstName" placeholder="First Name" required autofocus />\r\n        <div ng-messages="vm.userForm.firstName.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">First name is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label for="lastName">Last Name</label>\r\n        <input type="text" id="lastName" name="lastName" class="form-control" ng-model="vm.user.lastName" placeholder="Last Name" required />\r\n        <div ng-messages="vm.userForm.lastName.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Last name is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label class="control-label" for="roles">Roles</label>\r\n        <div class="controls">\r\n          <input class="form-control" type="text" name="roles" ng-model="vm.user.roles" id="roles" ng-list required />\r\n          <div ng-messages="vm.userForm.roles.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">At least one role is required.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class="form-group">\r\n        <input type="submit" value="Update" class="btn btn-default">\r\n      </div>\r\n    </fieldset>\r\n  </form>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/admin/list-users.client.view.html",'<div class="content-header">\r\n    <h1>Users</h1>\r\n    <input class="form-control" type="text" ng-model="vm.search" placeholder="Search" ng-change="vm.figureOutItemsToDisplay()" />\r\n</div>\r\n<section class="content body">\r\n  <div class="list-group">\r\n    <a ng-repeat="user in vm.pagedItems" ui-sref="admin.user({userId: user._id})" class="list-group-item">\r\n      <h4 class="list-group-item-heading" ng-bind="user.username"></h4>\r\n      <p class="list-group-item-text pull-right small" ng-bind="user.roles"></p>\r\n      <p class="list-group-item-text" ng-bind="user.email"></p>\r\n    </a>\r\n  </div>\r\n\r\n  <uib-pagination boundary-links="true" max-size="8" items-per-page="vm.itemsPerPage" total-items="vm.filterLength" ng-model="vm.currentPage" ng-change="vm.pageChanged()"></uib-pagination>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/admin/view-user.client.view.html",'<div class="content-header">\r\n    <h1><span ng-bind="vm.user.username"></span>\r\n      <div class="btn-group pull-right">\r\n        <a class="btn btn-info" ui-sref="admin.user-edit({userId: vm.user._id})">\r\n          <i class="glyphicon glyphicon-edit"></i> Edit\r\n        </a>\r\n        <a class="btn btn-danger" ng-click="vm.remove()" ng-if="!vm.isContextUserSelf()">\r\n          <i class="glyphicon glyphicon-trash"></i> Delete\r\n        </a>\r\n      </div>\r\n    </h1>\r\n</div>\r\n<section class="content body">\r\n\r\n  <div class="row">\r\n    <div class="col-md-8">\r\n      <div class="row">\r\n        <div class="col-md-3"><strong>First Name</strong></div>\r\n        <div class="col-md-6" ng-bind="vm.user.firstName"></div>\r\n      </div>\r\n      <hr/>\r\n      <div class="row">\r\n        <div class="col-md-3"><strong>Last Name</strong></div>\r\n        <div class="col-md-6" ng-bind="vm.user.lastName"></div>\r\n      </div>\r\n      <hr/>\r\n      <div class="row">\r\n        <div class="col-md-3"><strong>Username</strong></div>\r\n        <div class="col-md-6" ng-bind="vm.user.username"></div>\r\n      </div>\r\n      <hr/>\r\n      <div class="row">\r\n        <div class="col-md-3"><strong>Email</strong></div>\r\n        <div class="col-md-6" ng-bind="vm.user.email"></div>\r\n      </div>\r\n      <hr/>\r\n      <div class="row">\r\n        <div class="col-md-3"><strong>Department</strong></div>\r\n        <div class="col-md-6" ng-bind="vm.user.department"></div>\r\n      </div>\r\n      <hr/>\r\n      <div class="row">\r\n        <div class="col-md-3"><strong>Created</strong></div>\r\n        <div class="col-md-6" ng-bind="vm.user.created"></div>\r\n      </div>\r\n      <hr/>\r\n      <div class="row">\r\n        <div class="col-md-3"><strong>Roles</strong></div>\r\n        <div class="col-md-6" ng-bind="vm.user.roles"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/authentication/authentication.client.view.html",'<section class="row">\r\n  <!--<h3 class="col-md-12 text-center">Sign in using your social accounts</h3>\r\n  <div class="col-md-12 text-center">\r\n    <div class="social-account-container social-button"><a class="btn"><img class="img-responsive" ng-click="vm.callOauthProvider(\'/api/auth/facebook\')" ng-src="/modules/users/client/img/buttons/facebook.png"></a></div>\r\n    <div class="social-account-container social-button"><a class="btn"><img class="img-responsive" ng-click="vm.callOauthProvider(\'/api/auth/twitter\')" ng-src="/modules/users/client/img/buttons/twitter.png"></a></div>\r\n    <div class="social-account-container social-button"><a class="btn"><img class="img-responsive" ng-click="vm.callOauthProvider(\'/api/auth/google\')" ng-src="/modules/users/client/img/buttons/google.png"></a></div>\r\n    <div class="social-account-container social-button"><a class="btn"><img class="img-responsive" ng-click="vm.callOauthProvider(\'/api/auth/linkedin\')" ng-src="/modules/users/client/img/buttons/linkedin.png"></a></div>\r\n    <div class="social-account-container social-button"><a class="btn"><img class="img-responsive" ng-click="vm.callOauthProvider(\'/api/auth/github\')" ng-src="/modules/users/client/img/buttons/github.png"></a></div>\r\n    <div class="social-account-container social-button"><a class="btn"><img class="img-responsive" ng-click="vm.callOauthProvider(\'/api/auth/paypal\')"  ng-src="/modules/users/client/img/buttons/paypal.png"></a></div>\r\n  </div>-->\r\n  <div ui-view></div>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/authentication/signin.client.view.html",'<div>\r\n  <h3 class="col-xs-12 text-center">Sign in with your account</h3>\r\n  <div class="col-xs-offset-2 col-xs-8 col-md-offset-4 col-md-4">\r\n    <form name="vm.userForm" ng-submit="vm.signin(vm.userForm.$valid)" class="signin" novalidate autocomplete="off">\r\n      <fieldset>\r\n        <div class="form-group" show-errors>\r\n          <uib-alert type="danger" ng-show="vm.error" class="text-center text-danger">\r\n            <span ng-bind="vm.error"></span>\r\n          </uib-alert>\r\n          <label for="usernameOrEmail">Username or Email</label>\r\n          <input type="text" id="usernameOrEmail" name="usernameOrEmail" class="form-control" ng-model="vm.credentials.usernameOrEmail" placeholder="Username or Email" required autofocus>\r\n          <div ng-messages="vm.userForm.usernameOrEmail.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Username or Email is required.</p>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" show-errors>\r\n          <label for="password">Password</label>\r\n          <input type="password" id="password" name="password" class="form-control" ng-model="vm.credentials.password" placeholder="Password" required>\r\n          <div ng-messages="vm.userForm.password.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Password is required.</p>\r\n          </div>\r\n        </div>\r\n        <div class="text-center form-group">\r\n          <button type="submit" class="btn btn-primary">Sign in</button>\r\n          <!--&nbsp; or&nbsp;\r\n          <a ui-sref="authentication.signup">Sign up</a>-->\r\n        </div>\r\n        <div class="text-center forgot-password">\r\n          <a ui-sref="password.forgot">Forgot your password?</a>\r\n        </div>\r\n        <br />\r\n      </fieldset>\r\n    </form>\r\n  </div>\r\n</div>\r\n'),$templateCache.put("modules/users/client/views/authentication/signup.client.view.html",'<div>\r\n  <h3 class="col-xs-12 text-center">Sign up using your email</h3>\r\n  <div class="col-xs-offset-2 col-xs-8 col-md-offset-4 col-md-4">\r\n    <form name="vm.userForm" ng-submit="vm.signup(vm.userForm.$valid)" class="signin" novalidate autocomplete="off">\r\n      <fieldset>\r\n        <div class="form-group" show-errors>\r\n          <label for="firstName">First Name</label>\r\n          <input type="text" id="firstName" name="firstName" class="form-control" ng-model="vm.credentials.firstName" placeholder="First Name" required autofocus>\r\n          <div ng-messages="vm.userForm.firstName.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">First name is required.</p>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" show-errors>\r\n          <label for="lastName">Last Name</label>\r\n          <input type="text" id="lastName" name="lastName" class="form-control" ng-model="vm.credentials.lastName" placeholder="Last Name" required>\r\n          <div ng-messages="vm.userForm.lastName.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Last name is required.</p>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" show-errors>\r\n          <label for="roles">I am a </label>\r\n          <div>\r\n            <label class="radio-inline"><input type="radio" id="role" name="roles[]" value="student" ng-model="vm.credentials.roles" required>Student</label>\r\n            <label class="radio-inline"><input type="radio" id="role" name="roles[]" value="professor" ng-model="vm.credentials.roles" required>Professor</label>\r\n            <label class="radio-inline"><input type="radio" id="role" name="roles[]" value="hod" ng-model="vm.credentials.roles" required>Head of the Department</label>\r\n          </div>\r\n          <div ng-messages="vm.userForm.role.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Select a role.</p>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" show-errors>\r\n          <label for="department">Department</label>\r\n          <select id="department" name="department" class="form-control" ng-model="vm.credentials.department" required>\r\n            <option value="CSE">CSE</option>\r\n            <option value="ECE">ECE</option>\r\n            <option value="IT">IT</option>\r\n          </select>\r\n          <div ng-messages="vm.userForm.department.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Department is required.</p>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" show-errors>\r\n          <label for="email">Email</label>\r\n          <input type="email" id="email" name="email" class="form-control" ng-model="vm.credentials.email" placeholder="Email" lowercase required>\r\n          <div ng-messages="vm.userForm.email.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Email address is required.</p>\r\n            <p class="help-block error-text" ng-message="email">Email address is invalid.</p>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" show-errors>\r\n          <label for="username">Username</label>\r\n          <input type="text" id="username" name="username" class="form-control" ng-model="vm.credentials.username" ng-pattern="vm.usernameRegex" placeholder="Username" lowercase required>\r\n          <div ng-messages="vm.userForm.username.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Username is required.</p>\r\n            <p class="help-block error-text" ng-message="pattern">Please enter a valid username: 3+ characters long, non restricted word, characters "_-.", no consecutive dots, does not begin or end with dots, letters a-z and numbers 0-9.</p>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" show-errors>\r\n          <label for="password">Password</label>\r\n            <input type="password" id="password" name="password" class="form-control" ng-model="vm.credentials.password" placeholder="Password" uib-popover="{{vm.getPopoverMsg()}}" popover-trigger="outsideClick" password-validator required>\r\n          <div ng-messages="vm.userForm.password.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Password is required.</p>\r\n            <div ng-repeat="passwordError in passwordErrors">\r\n              <p class="help-block error-text" ng-show="vm.userForm.password.$error.requirements">{{passwordError}}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" ng-show="!vm.userForm.password.$error.required">\r\n          <label>Password Requirements</label>\r\n          <uib-progressbar value="requirementsProgress" type="{{requirementsColor}}"><span style="color:white; white-space:nowrap;">{{requirementsProgress}}%</span></uib-progressbar>\r\n        </div>\r\n        <div class="text-center form-group">\r\n          <button type="submit" class="btn btn-primary">Sign up</button>\r\n          &nbsp; or&nbsp;\r\n          <a ui-sref="authentication.signin" class="show-signup">Sign in</a>\r\n        </div>\r\n      </fieldset>\r\n    </form>\r\n  </div>\r\n</div>\r\n'),$templateCache.put("modules/users/client/views/password/forgot-password.client.view.html",'<section class="row">\r\n  <h3 class="col-md-12 text-center">Restore your password</h3>\r\n  <p class="small text-center">Enter your account username.</p>\r\n  <div class="col-xs-offset-2 col-xs-8 col-md-offset-5 col-md-2">\r\n    <form name="vm.forgotPasswordForm" ng-submit="vm.askForPasswordReset(vm.forgotPasswordForm.$valid)" class="form-horizontal" novalidate autocomplete="off">\r\n      <fieldset>\r\n        <div class="form-group" show-errors>\r\n          <input type="text" id="username" name="username" class="form-control" ng-model="vm.credentials.username" placeholder="Username" lowercase required autofocus>\r\n          <div ng-messages="vm.forgotPasswordForm.username.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Enter a username.</p>\r\n          </div>\r\n        </div>\r\n        <div class="text-center form-group">\r\n          <button type="submit" class="btn btn-primary">Submit</button>\r\n        </div>\r\n      </fieldset>\r\n    </form>\r\n  </div>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/password/reset-password-invalid.client.view.html",'<section class="row text-center">\r\n  <h3 class="col-md-12">Password reset is invalid</h3>\r\n  <a ui-sref="password.forgot" class="col-md-12">Ask for a new password reset</a>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/password/reset-password-success.client.view.html",'<section class="row text-center">\r\n  <h3 class="col-md-12">Password successfully reset</h3>\r\n  <a ui-sref="home" class="col-md-12">Continue to home page</a>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/password/reset-password.client.view.html",'<section class="row">\r\n  <h3 class="col-md-12 text-center">Reset your password</h3>\r\n  <div class="col-xs-offset-2 col-xs-8 col-md-offset-4 col-md-4">\r\n    <form name="vm.resetPasswordForm" ng-submit="vm.resetUserPassword(vm.resetPasswordForm.$valid)" class="signin form-horizontal" novalidate autocomplete="off">\r\n      <fieldset>\r\n        <div class="form-group" show-errors>\r\n          <label for="newPassword">New Password</label>\r\n          <input type="password" id="newPassword" name="newPassword" class="form-control" ng-model="vm.passwordDetails.newPassword" placeholder="New Password" autocomplete="new-password" uib-popover="{{vm.getPopoverMsg()}}" uib-popover-trigger="focus" uib-popover-placement="top" password-validator required autofocus>\r\n          <div ng-messages="vm.resetPasswordForm.newPassword.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Enter a new password.</p>\r\n            <div ng-repeat="passwordError in passwordErrors">\r\n              <p class="help-block error-text" ng-show="vm.resetPasswordForm.newPassword.$error.requirements">{{passwordError}}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" show-errors>\r\n          <label for="verifyPassword">Verify Password</label>\r\n          <input type="password" id="verifyPassword" name="verifyPassword" class="form-control" ng-model="vm.passwordDetails.verifyPassword" placeholder="Verify Password" password-verify="vm.passwordDetails.newPassword" required>\r\n          <div ng-messages="vm.resetPasswordForm.verifyPassword.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Enter the password again to verify.</p>\r\n            <p class="help-block error-text" ng-show="vm.resetPasswordForm.verifyPassword.$error.passwordVerify">Passwords do not match.</p>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" ng-show="!vm.resetPasswordForm.newPassword.$error.required">\r\n          <label>Password Requirements</label>\r\n          <uib-progressbar value="requirementsProgress" type="{{requirementsColor}}"><span style="color:white; white-space:nowrap;">{{requirementsProgress}}%</span></uib-progressbar>\r\n        </div>\r\n        <div class="text-center form-group">\r\n          <button type="submit" class="btn btn-primary">Update Password</button>\r\n        </div>\r\n      </fieldset>\r\n    </form>\r\n  </div>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/professors/add.client.view.html",'<div class="content-header">\r\n    <h1>Add Professors<small>Import from CSV</small></h1>\r\n</div>\r\n<section class="content body">\r\n    <form ng-submit="vm.parseAndImport()">\r\n        <div ng-show="vm.authentication.user.roles.indexOf(\'admin\') > -1" class="form-group">\r\n            <label for="department">Department</label>\r\n            <select class="form-control" ng-model="vm.department">\r\n                <option ng-repeat="dept in vm.departments" value="{{dept._id}}">{{dept.name}}</option>\r\n            </select>\r\n        </div>\r\n        <div class="form-group">\r\n            <label for="csvFile">CSV File</label>\r\n            <input class="form-control" type="file" accept=".csv" name="csvFile" file-list-bind="vm.csvFiles">\r\n        </div>\r\n        <div class="form-group">\r\n            <button ng-disabled="!vm.csvFiles.length" type="submit" class="btn btn-success">Import Data</button>\r\n        </div>\r\n    </form>\r\n</section>'),$templateCache.put("modules/users/client/views/professors/edit.client.view.html",'<div class="content-header">\r\n  <h1>{{vm.professor._id ? \'Edit Professor\' : \'New Professor\'}}</h1>\r\n</div>\r\n<section class="content body">\r\n  <form name="vm.form.professorForm" ng-submit="vm.save(vm.form.professorForm.$valid)" novalidate>\r\n    <fieldset>\r\n      <div class="form-group" show-errors>\r\n        <label class="control-label" for="firstName">First Name</label>\r\n        <input name="firstName" type="text" ng-model="vm.professor.firstName" id="firstName" class="form-control" placeholder="First Name" required>\r\n        <div ng-messages="vm.form.professorForm.firstName.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">First name is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label class="control-label" for="lastName">Last Name</label>\r\n        <input name="lastName" type="text" ng-model="vm.professor.lastName" id="lastName" class="form-control" placeholder="Last Name" required>\r\n        <div ng-messages="vm.form.professorForm.lastName.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Last name is required.</p>\r\n        </div>\r\n      </div>\r\n      <div ng-show="vm.authentication.user.roles.indexOf(\'admin\') > -1" class="form-group">\r\n          <label>Is HOD?</label>\r\n          <toggle ng-model="vm.isHOD"></toggle>\r\n      </div>\r\n      <div ng-show="vm.authentication.user.roles.indexOf(\'admin\') > -1" class="form-group">\r\n          <label for="department">Department</label>\r\n          <select class="form-control" ng-model="vm.professor.department" ng-required="vm.authentication.user.roles.indexOf(\'admin\') > -1">\r\n              <option ng-repeat="dept in vm.departments" value="{{dept._id}}" ng-selected="{{dept._id == vm.professor.department._id}}">{{dept.name}}</option>\r\n          </select>\r\n        <div ng-messages="vm.form.professorForm.code.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Department is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label class="control-label" for="email">Email</label>\r\n        <input name="email" type="text" ng-model="vm.professor.email" id="email" class="form-control" placeholder="Email" required>\r\n        <div ng-messages="vm.form.professorForm.email.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Email is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label class="control-label" for="username">Username</label>\r\n        <input name="username" type="text" ng-model="vm.professor.username" id="username" class="form-control" placeholder="Username" required>\r\n        <div ng-messages="vm.form.professorForm.username.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Username is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group">\r\n        <button type="submit" class="btn btn-primary">{{vm.professor._id ? \'Update\' : \'Add\'}} Professor</button>\r\n        <button class="btn btn-danger" ng-click="vm.remove()">\r\n          <i class="glyphicon glyphicon-trash"></i> Delete\r\n        </button>\r\n      </div>\r\n      <div ng-show="vm.error" class="text-danger">\r\n        <strong ng-bind="vm.error"></strong>\r\n      </div>\r\n    </fieldset>\r\n  </form>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/professors/list.client.view.html",'<div class="content-header">\r\n  <h1>Professors\r\n  <small ng-if="vm.professors.$resolved && !vm.professors.length">\r\n    No Professors yet, why don\'t you <a ui-sref="admin.professors.add">add one</a>?\r\n  </small></h1>\r\n</div>\r\n<section class="content body">\r\n  <ul class="list-group">\r\n    <li ng-repeat="professor in vm.professors"\r\n       class="list-group-item">\r\n      <h4 class="list-group-item-heading">\r\n        {{ professor.displayName }}\r\n        <div class="btn-group btn-xs pull-right">\r\n          <a class="btn btn-primary"\r\n            ui-sref="admin.professors.edit({ userId: professor._id })">\r\n            <i class="glyphicon glyphicon-edit"></i> Edit\r\n          </a>\r\n        </div>\r\n      </h4>\r\n      <div class="list-group-item-content">\r\n        {{ professor.email }}\r\n      </div>\r\n    </li>\r\n  </ul>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/settings/change-password.client.view.html",'<section class="row">\r\n  <div class="col-xs-offset-1 col-xs-10 col-md-offset-4 col-md-4">\r\n    <form name="vm.passwordForm" ng-submit="vm.changeUserPassword(vm.passwordForm.$valid)" class="signin" novalidate autocomplete="off">\r\n      <fieldset>\r\n        <div class="form-group" show-errors>\r\n          <label for="currentPassword">Current Password</label>\r\n          <input type="password" id="currentPassword" name="currentPassword" class="form-control" ng-model="vm.passwordDetails.currentPassword" placeholder="Current Password" required autofocus>\r\n          <div ng-messages="vm.passwordForm.currentPassword.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Your current password is required.</p>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" show-errors>\r\n          <label for="newPassword">New Password</label>\r\n          <input type="password" id="newPassword" name="newPassword" class="form-control" ng-model="vm.passwordDetails.newPassword" placeholder="New Password" uib-popover="{{vm.getPopoverMsg()}}" uib-popover-trigger="focus" password-validator required>\r\n          <div ng-messages="vm.passwordForm.newPassword.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Enter a new password.</p>\r\n            <div ng-repeat="passwordError in passwordErrors">\r\n              <p class="help-block error-text" ng-show="vm.passwordForm.newPassword.$error.requirements">{{passwordError}}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" show-errors>\r\n          <label for="verifyPassword">Verify Password</label>\r\n          <input type="password" id="verifyPassword" name="verifyPassword" class="form-control" ng-model="vm.passwordDetails.verifyPassword" placeholder="Verify Password" password-verify="vm.passwordDetails.newPassword" required>\r\n          <div ng-messages="vm.passwordForm.verifyPassword.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Verify your new password.</p>\r\n            <p class="help-block error-text" ng-show="vm.passwordForm.verifyPassword.$error.passwordVerify">Passwords do not match.</p>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" ng-show="!vm.passwordForm.newPassword.$error.required">\r\n          <label>Password Requirements</label>\r\n          <uib-progressbar value="requirementsProgress" type="{{requirementsColor}}"><span style="color:white; white-space:nowrap;">{{requirementsProgress}}%</span></uib-progressbar>\r\n        </div>\r\n        <div class="text-center form-group">\r\n          <button type="submit" class="btn btn-primary">Save Password</button>\r\n        </div>\r\n      </fieldset>\r\n    </form>\r\n  </div>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/settings/change-profile-picture.client.view.html",'<section class="row">\r\n  <div class="col-xs-offset-1 col-xs-10 col-md-offset-3 col-md-4">\r\n    <form class="signin form-horizontal">\r\n      <fieldset>\r\n        <div class="form-group text-center">\r\n          <img ngf-src="vm.fileSelected ? picFile : \'/\' + vm.user.profileImageURL" alt="{{vm.user.displayName}}" class="img-thumbnail user-profile-picture" ngf-drop>\r\n        </div>\r\n        <div ng-show="vm.loading" class="form-group text-center">\r\n          <img ng-src="/modules/core/client/img/loaders/loader.gif" height="50" width="50" alt="Loading image...">\r\n        </div>\r\n        <div ng-show="!vm.fileSelected" class="text-center form-group">\r\n          <button class="btn btn-default btn-file" ngf-select="(vm.fileSelected = true) && (vm.loading = false)" ng-model="picFile" accept="image/*" ngf-before-model-change="vm.loading = true" ngf-resize="{width: 400}" ngf-resize-if="$width > 400 || $height > 400">Select Picture</button>\r\n        </div>\r\n        <div ng-show="vm.fileSelected" class="text-center form-group">\r\n          <button class="btn btn-primary" ng-click="vm.upload(picFile)">Use This Picture</button>\r\n          <button class="btn btn-default" ng-click="vm.fileSelected = false">Cancel</button>\r\n        </div>\r\n        <div ng-show="vm.fileSelected" class="progress text-center">\r\n          <div class="progress-bar" role="progressbar" aria-valuenow="{{vm.progress}}" aria-valuemin="0" aria-valuemax="100" style="width:{{vm.progress}}%" ng-bind="vm.progress + \'%\'">\r\n            <span class="sr-only">{{vm.progress}}% Complete</span>\r\n          </div>\r\n        </div>\r\n      </fieldset>\r\n    </form>\r\n  </div>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/settings/edit-profile.client.view.html",'<section class="row">\r\n  <div class="col-xs-offset-1 col-xs-10 col-md-offset-4 col-md-4">\r\n    <form name="vm.userForm" ng-submit="vm.updateUserProfile(vm.userForm.$valid)" class="signin" novalidate autocomplete="off">\r\n      <fieldset>\r\n        <div class="form-group" show-errors>\r\n          <label for="firstName">First Name</label>\r\n          <input type="text" id="firstName" name="firstName" class="form-control" ng-model="vm.user.firstName" placeholder="First Name" required autofocus>\r\n          <div ng-messages="vm.userForm.firstName.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">First name is required.</p>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" show-errors>\r\n          <label for="lastName">Last Name</label>\r\n          <input type="text" id="lastName" name="lastName" class="form-control" ng-model="vm.user.lastName" placeholder="Last Name" required>\r\n          <div ng-messages="vm.userForm.lastName.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Last name is required.</p>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" show-errors>\r\n          <label for="email">Email</label>\r\n          <input type="email" id="email" name="email" class="form-control" ng-model="vm.user.email" placeholder="Email" lowercase required>\r\n          <div ng-messages="vm.userForm.email.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Email address is required.</p>\r\n            <p class="help-block error-text" ng-message="email">Email address is invalid.</p>\r\n          </div>\r\n        </div>\r\n        <div class="form-group" show-errors>\r\n          <label for="username">Username</label>\r\n          <input type="text" id="username" name="username" class="form-control" ng-model="vm.user.username" placeholder="Username" lowercase required>\r\n          <div ng-messages="vm.userForm.username.$error" role="alert">\r\n            <p class="help-block error-text" ng-message="required">Username is required.</p>\r\n          </div>\r\n        </div>\r\n        <div class="text-center form-group">\r\n          <button type="submit" class="btn btn-primary">Save Profile</button>\r\n        </div>\r\n      </fieldset>\r\n    </form>\r\n  </div>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/settings/manage-social-accounts.client.view.html",'<section class="row">\r\n  <h3 class="col-md-12 text-center" ng-show="vm.hasConnectedAdditionalSocialAccounts()">Connected social accounts:</h3>\r\n  <div class="col-md-12 text-center">\r\n    <!-- If the user\'s provider field (primary) is a social account, show it here -->\r\n    <div ng-if="vm.user.provider !== \'local\'" class="social-account-container">\r\n      <img ng-src="/modules/users/client/img/buttons/{{vm.user.provider}}.png">\r\n      <i class="glyphicon glyphicon-check text-success user-primary-account" data-toggle="popover" title="Primary: {{vm.user.provider}}"></i>\r\n    </div>\r\n    <div ng-repeat="(providerName, providerData) in vm.user.additionalProvidersData" class="social-account-container">\r\n      <a href ng-click="vm.removeUserSocialAccount(providerName)">\r\n        <img class="social-button" ng-src="/modules/users/client/img/buttons/{{::providerName}}.png">\r\n        <span class="btn btn-danger btn-add-remove-account">\r\n          <i class="glyphicon glyphicon-trash"></i>\r\n        </span>\r\n      </a>\r\n    </div>\r\n  </div>\r\n  <h3 class="col-md-12 text-center" ng-show="!vm.hasConnectedAdditionalSocialAccounts()">Unconnected social accounts:</h3>\r\n  <div class="col-md-12 text-center">\r\n    <div class="social-account-container" ng-hide="vm.isConnectedSocialAccount(\'facebook\')">\r\n      <a href="" ng-click="vm.callOauthProvider(\'/api/auth/facebook\')">\r\n        <img class="social-button" ng-src="/modules/users/client/img/buttons/facebook.png">\r\n        <span class="btn btn-success btn-add-remove-account">\r\n          <i class="glyphicon glyphicon-plus"></i>\r\n        </span>\r\n      </a>\r\n    </div>\r\n    <div class="social-account-container" ng-hide="vm.isConnectedSocialAccount(\'twitter\')">\r\n      <a href="" ng-click="vm.callOauthProvider(\'/api/auth/twitter\')">\r\n        <img class="social-button" ng-src="/modules/users/client/img/buttons/twitter.png">\r\n        <span class="btn btn-success btn-add-remove-account">\r\n          <i class="glyphicon glyphicon-plus"></i>\r\n        </span>\r\n      </a>\r\n    </div>\r\n    <div class="social-account-container" ng-hide="vm.isConnectedSocialAccount(\'google\')">\r\n      <a href="" ng-click="vm.callOauthProvider(\'/api/auth/google\')">\r\n        <img class="social-button" ng-src="/modules/users/client/img/buttons/google.png">\r\n        <span class="btn btn-success btn-add-remove-account">\r\n          <i class="glyphicon glyphicon-plus"></i>\r\n        </span>\r\n      </a>\r\n    </div>\r\n    <div class="social-account-container" ng-hide="vm.isConnectedSocialAccount(\'linkedin\')">\r\n      <a href="" ng-click="vm.callOauthProvider(\'/api/auth/linkedin\')">\r\n        <img class="social-button" ng-src="/modules/users/client/img/buttons/linkedin.png">\r\n        <span class="btn btn-success btn-add-remove-account">\r\n          <i class="glyphicon glyphicon-plus"></i>\r\n        </span>\r\n      </a>\r\n    </div>\r\n    <div class="social-account-container" ng-hide="vm.isConnectedSocialAccount(\'github\')">\r\n      <a href="" ng-click="vm.callOauthProvider(\'/api/auth/github\')">\r\n        <img class="social-button" ng-src="/modules/users/client/img/buttons/github.png">\r\n        <span class="btn btn-success btn-add-remove-account">\r\n          <i class="glyphicon glyphicon-plus"></i>\r\n        </span>\r\n      </a>\r\n    </div>\r\n    <div class="social-account-container" ng-hide="vm.isConnectedSocialAccount(\'paypal\')">\r\n      <a href="" ng-click="vm.callOauthProvider(\'/api/auth/paypal\')">\r\n        <img class="social-button" ng-src="/modules/users/client/img/buttons/paypal.png">\r\n        <span class="btn btn-success btn-add-remove-account">\r\n          <i class="glyphicon glyphicon-plus"></i>\r\n        </span>\r\n      </a>\r\n    </div>\r\n  </div>\r\n</section>\r\n'),
$templateCache.put("modules/users/client/views/settings/settings.client.view.html",'<section>\r\n  <div class="page-header">\r\n    <h1>Settings</h1>\r\n  </div>\r\n  <div class="row">\r\n    <nav class="col-sm-3 col-md-3">\r\n      <ul class="nav nav-pills nav-stacked">\r\n        <li ui-sref-active="active">\r\n          <a ui-sref="settings.profile">Edit Profile</a>\r\n        </li>\r\n        <li ui-sref-active="active">\r\n          <a ui-sref="settings.picture">Change Profile Picture</a>\r\n        </li>\r\n        <li ui-sref-active="active" ng-show="vm.user.provider === \'local\'">\r\n          <a ui-sref="settings.password">Change Password</a>\r\n        </li>\r\n        <!--<li ui-sref-active="active">\r\n          <a ui-sref="settings.accounts">Manage Social Accounts</a>\r\n        </li>-->\r\n      </ul>\r\n    </nav>\r\n    <div class="col-sm-9 col-md-8 settings-view">\r\n      <div ui-view></div>\r\n    </div>\r\n  </div>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/students/add.client.view.html",'<div class="content-header">\r\n    <h1>Add Students<small>Import from CSV</small></h1>\r\n</div>\r\n<section class="content body">\r\n    <form ng-submit="vm.parseAndImport()">\r\n        <div ng-show="vm.authentication.user.roles.indexOf(\'admin\') > -1" class="form-group">\r\n            <label for="department">Department</label>\r\n            <select class="form-control" ng-model="vm.department">\r\n                <option ng-repeat="dept in vm.departments" value="{{dept._id}}">{{dept.name}}</option>\r\n            </select>\r\n        </div>\r\n        <div class="form-group">\r\n            <label for="csvFile">CSV File</label>\r\n            <input class="form-control" type="file" accept=".csv" name="csvFile" file-list-bind="vm.csvFiles">\r\n        </div>\r\n        <div class="form-group">\r\n            <button ng-disabled="!vm.csvFiles.length" type="submit" class="btn btn-success">Import Data</button>\r\n        </div>\r\n    </form>\r\n</section>'),$templateCache.put("modules/users/client/views/students/edit.client.view.html",'<div class="content-header">\r\n  <h1>{{vm.student._id ? \'Edit Student\' : \'New Student\'}}</h1>\r\n</div>\r\n<section class="content body">\r\n  <form name="vm.form.studentForm" ng-submit="vm.save(vm.form.studentForm.$valid)" novalidate>\r\n    <fieldset>\r\n      <div class="form-group" show-errors>\r\n        <label class="control-label" for="firstName">First Name</label>\r\n        <input name="firstName" type="text" ng-model="vm.student.firstName" id="firstName" class="form-control" placeholder="First Name" required>\r\n        <div ng-messages="vm.form.studentForm.firstName.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">First name is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label class="control-label" for="lastName">Last Name</label>\r\n        <input name="lastName" type="text" ng-model="vm.student.lastName" id="lastName" class="form-control" placeholder="Last Name" required>\r\n        <div ng-messages="vm.form.studentForm.lastName.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Last name is required.</p>\r\n        </div>\r\n      </div>\r\n      <div ng-show="vm.authentication.user.roles.indexOf(\'admin\') > -1" class="form-group">\r\n          <label for="department">Department</label>\r\n          <select class="form-control" ng-model="vm.student.department" ng-required="vm.authentication.user.roles.indexOf(\'admin\') > -1">\r\n              <option ng-repeat="dept in vm.departments" value="{{dept._id}}" ng-selected="{{dept._id == vm.student.department._id}}">{{dept.name}}</option>\r\n          </select>\r\n        <div ng-messages="vm.form.studentForm.code.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Department is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label class="control-label" for="regno">Registration Number</label>\r\n        <input name="regno" type="text" ng-model="vm.student.metaData.regno" id="regno" class="form-control" placeholder="Registration number" required>\r\n        <div ng-messages="vm.form.studentForm.regno.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Registration number is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label class="control-label" for="batch">Batch (Year of completion)</label>\r\n        <input name="batch" type="number" ng-model="vm.student.metaData.batch" id="batch" class="form-control" placeholder="Batch" min="1990" max="2100" required>\r\n        <div ng-messages="vm.form.studentForm.batch.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Batch is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label class="control-label" for="semester">Semester</label>\r\n        <input name="semester" type="number" ng-model="vm.student.metaData.semester" id="semester" class="form-control" placeholder="Semester" min="1" max="8" required>\r\n        <div ng-messages="vm.form.studentForm.semester.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Semester is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label class="control-label" for="email">Email</label>\r\n        <input name="email" type="text" ng-model="vm.student.email" id="email" class="form-control" placeholder="Email" required>\r\n        <div ng-messages="vm.form.studentForm.email.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Email is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" show-errors>\r\n        <label class="control-label" for="username">Username</label>\r\n        <input name="username" type="text" ng-model="vm.student.username" id="username" class="form-control" placeholder="Username" required>\r\n        <div ng-messages="vm.form.studentForm.username.$error" role="alert">\r\n          <p class="help-block error-text" ng-message="required">Username is required.</p>\r\n        </div>\r\n      </div>\r\n      <div class="form-group">\r\n        <button type="submit" class="btn btn-primary">{{vm.student._id ? \'Update\' : \'Add\'}} Student</button>\r\n        <button class="btn btn-danger" ng-click="vm.remove()">\r\n          <i class="glyphicon glyphicon-trash"></i> Delete\r\n        </button>\r\n      </div>\r\n      <div ng-show="vm.error" class="text-danger">\r\n        <strong ng-bind="vm.error"></strong>\r\n      </div>\r\n    </fieldset>\r\n  </form>\r\n</section>\r\n'),$templateCache.put("modules/users/client/views/students/list.client.view.html",'<div class="content-header">\r\n  <h1>Students\r\n  <small ng-if="vm.students.$resolved && !vm.students.length">\r\n    No Students yet, why don\'t you <a ui-sref="admin.students.add">add one</a>?\r\n  </small></h1>\r\n</div>\r\n<section class="content body">\r\n  <ul class="list-group">\r\n    <li ng-repeat="student in vm.students"\r\n       class="list-group-item">\r\n      <h4 class="list-group-item-heading">\r\n        {{ student.displayName }}\r\n        <div class="btn-group btn-xs pull-right">\r\n          <a class="btn btn-primary"\r\n            ui-sref="admin.students.edit({ userId: student._id })">\r\n            <i class="glyphicon glyphicon-edit"></i> Edit\r\n          </a>\r\n        </div>\r\n      </h4>\r\n      <div class="list-group-item-content">\r\n        {{ student.email }}\r\n      </div>\r\n    </li>\r\n  </ul>\r\n</section>\r\n')}angular.module("core").run(templates),templates.$inject=["$templateCache"]}();